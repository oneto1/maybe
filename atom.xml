<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>oneto1</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-20T10:55:23.888Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>oneto1</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次网页加载速度优化</title>
    <link href="http://yoursite.com/2020/08/20/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%BD%91%E9%A1%B5%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2020/08/20/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%BD%91%E9%A1%B5%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96/</id>
    <published>2020-08-20T08:28:48.000Z</published>
    <updated>2020-08-20T10:55:23.888Z</updated>
    
    <content type="html"><![CDATA[<p>接上一篇code-server搭建完之后,单单可用是当然不行的,在没有缓存的情况下,每次要加载完十几秒,不能忍,忍不了</p><a id="more"></a><h2 id="抓出罪魁祸首"><a href="#抓出罪魁祸首" class="headerlink" title="抓出罪魁祸首"></a>抓出罪魁祸首</h2><p>打开开发者工具</p><p><img src="/images/20200820=2.png" alt></p><p>发现竟有一个js文件达到了7.1MB,好吧,以5M的小水管下完肯定要十几秒,还算超常发挥了</p><p>然后就是协议还是HTTP1.1,请求数超过了40个,这里可以升级一下</p><h2 id="HTTP2-的新特性"><a href="#HTTP2-的新特性" class="headerlink" title="HTTP2 的新特性"></a>HTTP2 的新特性</h2><ul><li>二进制分帧: 同域名下所有通信都在单个连接上完成，该连接可以承载任意数量的双向数据流. 每个数据流都以消息的形式发送，而消息又由一个或多个帧组成. 多个帧之间可以乱序发送，根据帧首部的流标识可以重新组装</li><li>多路复用: 所有的请求通过一个TCP连接来完成,不同的请求被当作不同的流分为不同的帧双向传送. 这里可以解决HTTP1.1中,请求的最大连接数只有6-8个,减少了TCP连接数和节省了资源</li><li>首部压缩: 为了减少冗余首部带来的性能浪费,各自维护首部的”首部表”,下次只发送差异部分</li><li>服务器推送: 浏览器发送一个请求，服务器主动向浏览器推送与这个请求相关的资源，这样浏览器就不用发起后续请求</li></ul><blockquote><p><a href="https://juejin.im/post/6844903667569541133#heading-0" target="_blank" rel="noopener">refer</a></p></blockquote><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>由于不好对code-server直接下手,那么就套一层反向代理吧</p><h4 id="开启gzip压缩"><a href="#开启gzip压缩" class="headerlink" title="开启gzip压缩"></a>开启gzip压缩</h4><p>对于大文件只好先压缩再发送了</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    gzip  <span class="keyword">on</span>;</span><br><span class="line">    gzip_comp_level <span class="number">6</span>;  <span class="comment"># 压缩级别</span></span><br><span class="line">    gzip_proxied any;   <span class="comment"># 压缩为所有代理请求</span></span><br><span class="line">    gzip_types <span class="built_in">text</span>/plain <span class="built_in">text</span>/css <span class="built_in">application</span>/wasm  \</span><br><span class="line">    <span class="built_in">application</span>/json <span class="built_in">application</span>/javascript \</span><br><span class="line">    <span class="built_in">application</span>/x-javascript  <span class="built_in">text</span>/javascript ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>开启 gzip 默认只压缩 <code>text/html</code></li><li>用<code>gzip_types</code> 把大文件统统压缩</li></ul><p><a href="https://docs.nginx.com/nginx/admin-guide/web-server/compression/" target="_blank" rel="noopener">https://docs.nginx.com/nginx/admin-guide/web-server/compression/</a></p><h3 id="开启HTTP2"><a href="#开启HTTP2" class="headerlink" title="开启HTTP2"></a>开启HTTP2</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="built_in"> server </span>&#123;</span><br><span class="line">        listen 12345 ssl http2;</span><br><span class="line"></span><br><span class="line">        ssl_certificate /etc/nginx/path.cer;</span><br><span class="line">        ssl_certificate_key /etc/nginx/path.key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置反向代理"><a href="#设置反向代理" class="headerlink" title="设置反向代理"></a>设置反向代理</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8080/;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Connection upgrade;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Accept-Encoding gzip;</span><br><span class="line">    <span class="attribute">expires</span>      <span class="number">24h</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Connection upgrade;</code> 表示将协议切换至WebSocket</li><li>然而HTTP2 并不支持WebSocket,这里指的是 nginx 与 被代理的服务用到是WebSocket协议</li></ul><p><a href="https://github.com/cdr/code-server/blob/master/doc/guide.md#nginx" target="_blank" rel="noopener">https://github.com/cdr/code-server/blob/master/doc/guide.md#nginx</a></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/images/20200820=3.png" alt></p><p>一番设置下来那还是比刚开始快了不少</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接上一篇code-server搭建完之后,单单可用是当然不行的,在没有缓存的情况下,每次要加载完十几秒,不能忍,忍不了&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="优化" scheme="http://yoursite.com/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>简单打造自己的中转文件服务器</title>
    <link href="http://yoursite.com/2020/08/13/%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E7%A7%81%E6%9C%89%E7%BD%91%E7%9B%98/"/>
    <id>http://yoursite.com/2020/08/13/%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E7%A7%81%E6%9C%89%E7%BD%91%E7%9B%98/</id>
    <published>2020-08-13T14:44:27.000Z</published>
    <updated>2020-08-20T06:43:07.117Z</updated>
    
    <content type="html"><![CDATA[<p>最近突然有一些文件中转的需求,目标机器上可用的基本上只有个浏览器和一个简易SHELL可用, <del>没错说的就是chromeos</del></p><p>本着数据自主可用和资源合理利用的原则,于是就有了这篇</p><a id="more"></a><h2 id="nginx方案"><a href="#nginx方案" class="headerlink" title="nginx方案"></a>nginx方案</h2><p>简单思路就是开启目录功能和加上基本的认证,最后加上https</p><h4 id="创建所需密码认证文件"><a href="#创建所需密码认证文件" class="headerlink" title="创建所需密码认证文件"></a>创建所需密码认证文件</h4><p><a href="http://nginx.org/en/docs/http/ngx_http_auth_basic_module.html" target="_blank" rel="noopener">ngx_http_auth_basic_module</a></p><p>这里使用’openssl passwd`手动来拼接,就不用专用的命令行工具了</p><p>请确保自己有权限</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">username</span>=1234</span><br><span class="line"></span><br><span class="line">echo -n <span class="string">"<span class="variable">$&#123;username&#125;</span>:"</span> &gt;&gt; /etc/nginx/.passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按提示输入密码</span></span><br><span class="line">openssl passwd  &gt;&gt; /etc/nginx/.passwd</span><br></pre></td></tr></table></figure><ul><li>这样我们拥有了一个密钥文件</li></ul><p>再来配置  nginx.conf</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">basic_auth</span> <span class="string">"/"</span> ;</span><br><span class="line">    <span class="attribute">basic_auth_user_file</span> /etc/nginx/.passwd ;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /usr/local/nginx/html ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来测试一下<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -u <span class="number">1234</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line"># 手动输入密码</span><br></pre></td></tr></table></figure></p><ul><li>不是 401 错误即成功</li></ul><h4 id="开启-autoindex"><a href="#开启-autoindex" class="headerlink" title="开启 autoindex"></a>开启 autoindex</h4><p>上面只是加上了认证,但在浏览器上看还是不方便</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">basic_auth</span> <span class="string">"/"</span> ;</span><br><span class="line">    <span class="attribute">basic_auth_user_file</span> /etc/nginx/.passwd ;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /usr/local/nginx/html ;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">autoindex_exact_size</span> <span class="literal">on</span>;  <span class="comment">#显示大小  </span></span><br><span class="line">    <span class="attribute">autoindex_localtime</span> <span class="literal">on</span>;    <span class="comment">#显示时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这样一来,文件多起来也不用怕</li></ul><h4 id="开启https支持"><a href="#开启https支持" class="headerlink" title="开启https支持"></a>开启https支持</h4><p>这里用 <a href="https://github.com/acmesh-official/acme.sh" target="_blank" rel="noopener">acme.sh</a> 来创建所需证书</p><p>安装<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl  http<span class="variable">s:</span>//<span class="built_in">get</span>.acme.<span class="keyword">sh</span> | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure></p><p>由于是国内主机又没有备案,走默认的认证方式总不成功<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme<span class="selector-class">.sh</span> --issue  -d mydomain<span class="selector-class">.com</span> --nginx</span><br></pre></td></tr></table></figure></p><p>最后是采用dns验证,才成功的<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">acme<span class="selector-class">.sh</span> --issue -d  mydomain<span class="selector-class">.com</span> --dns\</span><br><span class="line">--yes-I-know-dns-manual-mode-enough-go-ahead-please</span><br><span class="line"></span><br><span class="line">acme<span class="selector-class">.sh</span> --issue -d mydomain<span class="selector-class">.com</span> --dns\</span><br><span class="line">--yes-I-know-dns-manual-mode-enough-go-ahead-please --renew</span><br></pre></td></tr></table></figure></p><ul><li>先执行第一个命令,按照提示添加一个域名dns的 txt 记录,再执行第二个命令</li><li>这个需要每三个月执行一次,不然就过期了 </li></ul><p>修改 nginx 配置<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 12345 ssl http2 ;</span><br><span class="line">    </span><br><span class="line">    ssl_certificate /path;</span><br><span class="line">    ssl_sertificate_key /path.key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>重启就大功告成了</li></ul><p>这个方案只能下载不能上传,不过也能用了</p><h2 id="code-server-方案"><a href="#code-server-方案" class="headerlink" title="code-server 方案"></a>code-server 方案</h2><p><a href="https://github.com/cdr/code-server" target="_blank" rel="noopener">https://github.com/cdr/code-server</a></p><ul><li>在浏览器中使用vscode</li></ul><p>发现是可以在(进入到网页版code的)资源管理器通过拖拉文件来实现文件上传下载,还挺方便的</p><p>默认登录进去是有对机器完整访问权限的,为省事就用 docker 好了<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">docker</span> pull  codercom/<span class="meta">code</span>-server:latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="symbol">docker</span> run -<span class="keyword">it </span>-p <span class="number">8080</span>:<span class="number">8080</span> \</span><br><span class="line">-v <span class="string">"/data/vscode:/home/coder"</span> \</span><br><span class="line"><span class="symbol">codercom</span>/<span class="meta">code</span>-server:latest</span><br></pre></td></tr></table></figure></p><p>查看登录密码<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it code-server cat /<span class="built_in">home</span>/coder/.<span class="built_in">config</span>/code-server/<span class="built_in">config</span>.yaml</span><br></pre></td></tr></table></figure></p><ul><li>此时再去浏览器登录就好了</li></ul><p>还额外收获一个网页版vscode,也不错了</p><h2 id="nextcloud-方案"><a href="#nextcloud-方案" class="headerlink" title="nextcloud 方案"></a>nextcloud 方案</h2><blockquote><p>A safe home for all your data. Access &amp; share your files, calendars, contacts, mail &amp; more from any device, on your terms.</p></blockquote><p><a href="https://nextcloud.com" target="_blank" rel="noopener">nextcloud</a></p><p>也使用docker 来安装吧<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">docker</span> <span class="string">pull nextcloud</span></span><br><span class="line"></span><br><span class="line"><span class="attr">docker</span> <span class="string">run -d \</span></span><br><span class="line"><span class="meta">-v</span> <span class="string">nextcloud:/var/www/html \</span></span><br><span class="line"><span class="meta">-p</span> <span class="string">12345:80 \</span></span><br><span class="line"><span class="attr">nextcloud</span></span><br></pre></td></tr></table></figure></p><ul><li>数据都在 <code>/var/www/html</code></li><li>nextcloud 默认是将数据持久存储在匿名卷中的,我们可以指定一个名字方便记忆</li></ul><p>然后就可以打开浏览器或下载相应客户端输入地址访问了,不同平台下也有相应的客户端也用</p><p><img src="/images/20200820=0.png" alt></p><p>全功能网盘就是不一样,果然专业的事还是要给专业的人做</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近突然有一些文件中转的需求,目标机器上可用的基本上只有个浏览器和一个简易SHELL可用, &lt;del&gt;没错说的就是chromeos&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;本着数据自主可用和资源合理利用的原则,于是就有了这篇&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="vscode" scheme="http://yoursite.com/tags/vscode/"/>
    
      <category term="https" scheme="http://yoursite.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>关于nginx的一些URL的匹配规则</title>
    <link href="http://yoursite.com/2020/08/12/%E5%85%B3%E4%BA%8Enginx%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99/"/>
    <id>http://yoursite.com/2020/08/12/%E5%85%B3%E4%BA%8Enginx%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99/</id>
    <published>2020-08-12T12:11:50.000Z</published>
    <updated>2020-08-12T12:30:50.258Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="location-匹配规则"><a href="#location-匹配规则" class="headerlink" title="location 匹配规则"></a>location 匹配规则</h3><ol><li>首先匹配 = (精确匹配)</li><li>其次匹配 ^~(正则匹配)</li><li>最后是交给 / 匹配所有<br>当有匹配成功时候，停止匹配，按当前匹配规则处理请求。</li></ol><ul><li>~ 是区分大小写的, ~* 是不区分大小写的</li><li>例如需要匹配某个后缀,可以这样 <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">location</span> <span class="title">~* \.(png</span>|js|html)$ &#123;</span><br><span class="line">    root /data/ ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>而location后加不加 <code>/</code> , 也是有区别的 举个例子<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">location</span> <span class="title">/test</span>/&#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">location</span> <span class="title">/test</span> &#123;&#125;</span><br></pre></td></tr></table></figure></p><ul><li>当访问 /test/123.html,都能匹配到</li><li>当访问 /testtest.html,匹配到后面那个</li></ul><p>这里的 “<code>/</code>“强调的是路径</p><h3 id="proxy-pass-匹配规则"><a href="#proxy-pass-匹配规则" class="headerlink" title="proxy_pass 匹配规则"></a>proxy_pass 匹配规则</h3><p>当我们访问 /test/1.html<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">location</span> <span class="title">/test</span>/ &#123;</span><br><span class="line">    proxy_pass http://localhost/ ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>此时实际访问的是 localhost/test/1.html</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">location</span> <span class="title">/test</span>/ &#123;</span><br><span class="line">    proxy_pass http://localhost ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>此时访问的是 localhost/1.html</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location <span class="regexp">/test/</span> &#123;</span><br><span class="line">    proxy_pass http:<span class="regexp">//</span>localhost<span class="regexp">/dir/</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>此时实际访问的是 localhost/dir/1.html</li></ul><p>虽然看上去多一个少一个”<code>/</code>“差别不大,但实际上各自意思大不一样,可不能想写那个就写哪个😿️</p><!-- location /test/ {    proxy_pass http://localhost/dir ;}此时实际访问的是 localhost/testdir/1.html -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;location-匹配规则&quot;&gt;&lt;a href=&quot;#location-匹配规则&quot; class=&quot;headerlink&quot; title=&quot;location 匹配规则&quot;&gt;&lt;/a&gt;location 匹配规则&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;首先
      
    
    </summary>
    
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>💁🏻‍♂️</title>
    <link href="http://yoursite.com/2020/08/02/%F0%9F%92%81%F0%9F%8F%BB%E2%80%8D%E2%99%82%EF%B8%8F/"/>
    <id>http://yoursite.com/2020/08/02/%F0%9F%92%81%F0%9F%8F%BB%E2%80%8D%E2%99%82%EF%B8%8F/</id>
    <published>2020-08-02T09:49:03.000Z</published>
    <updated>2020-08-12T12:24:49.796Z</updated>
    
    <content type="html"><![CDATA[<p>时间过得真快啊,一下子就快实习了两个月了,虽然这也不是什么断更的理由</p><p>那么就接下来继续努力吧</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;时间过得真快啊,一下子就快实习了两个月了,虽然这也不是什么断更的理由&lt;/p&gt;
&lt;p&gt;那么就接下来继续努力吧&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="乱七八糟" scheme="http://yoursite.com/tags/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F/"/>
    
  </entry>
  
  <entry>
    <title>翻译: ansible-tuto（12-13）</title>
    <link href="http://yoursite.com/2020/05/18/%E7%BF%BB%E8%AF%91-ansible-tuto%EF%BC%8812-13%EF%BC%89/"/>
    <id>http://yoursite.com/2020/05/18/%E7%BF%BB%E8%AF%91-ansible-tuto%EF%BC%8812-13%EF%BC%89/</id>
    <published>2020-05-18T02:26:33.000Z</published>
    <updated>2020-05-18T02:49:23.578Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h1 id="step-12-迁移到-role"><a href="#step-12-迁移到-role" class="headerlink" title="step-12 迁移到 role"></a>step-12 迁移到 role</h1><p>现在我们的剧本完成了，让我们重构一切！ 我们将用 <code>role</code> 来取代我们的戏剧。  <code>role</code>只是一种组织文件的新方式，但是带来了有趣的特性。 在这里我不会详细讨论，因为它们已经列出在 Ansible 的文档中，但我最喜欢的可能是 <code>role</code>依赖性:  <code>role</code> b 可以依赖于另一个 <code>role</code> a，因此，当应用 <code>role</code> b 时， <code>role</code> a 也会自动应用。 我们将在下一章中看到这一点，但是现在，让我们重构一下我们的剧本，使用 <code>role</code>。</p><h3 id="role-的结构"><a href="#role-的结构" class="headerlink" title="role 的结构"></a>role 的结构</h3><p>role 为 Ansible 添加了一点“魔力” : 它们假定一个特定的文件组织。 虽然有一个关于角色的建议布局，但是您可以按照您想要的方式来组织包含内容。 然而，role  的约定有助于构建模块化的剧本，并且内务管理将简单得多。 Rubyists 会称之为“约定优于配置”。</p><p>role 的文件布局如下:<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">roles</span><br><span class="line">  |</span><br><span class="line"><span class="string">  </span>|_some_role</span><br><span class="line">       |</span><br><span class="line"><span class="string">       </span>|_defaults</span><br><span class="line">       |<span class="string">   </span>|</span><br><span class="line">       |<span class="string">   </span>|<span class="string">_main.yml</span></span><br><span class="line"><span class="string">       </span>|<span class="string">   </span>|<span class="string">_...</span></span><br><span class="line"><span class="string">       </span>|</span><br><span class="line">       |<span class="string">_files</span></span><br><span class="line"><span class="string">       </span>|<span class="string">   </span>|</span><br><span class="line">       |<span class="string">   </span>|_file1</span><br><span class="line">       |<span class="string">   </span>|<span class="string">_...</span></span><br><span class="line"><span class="string">       </span>|</span><br><span class="line">       |<span class="string">_handlers</span></span><br><span class="line"><span class="string">       </span>|<span class="string">   </span>|</span><br><span class="line">       |<span class="string">   </span>|<span class="string">_main.yml</span></span><br><span class="line"><span class="string">       </span>|<span class="string">   </span>|<span class="string">_some_other_file.yml</span></span><br><span class="line"><span class="string">       </span>|<span class="string">   </span>|<span class="string">_ ...</span></span><br><span class="line"><span class="string">       </span>|</span><br><span class="line">       |<span class="string">_meta</span></span><br><span class="line"><span class="string">       </span>|<span class="string">   </span>|</span><br><span class="line">       |<span class="string">   </span>|<span class="string">_main.yml</span></span><br><span class="line"><span class="string">       </span>|<span class="string">   </span>|<span class="string">_some_other_file.yml</span></span><br><span class="line"><span class="string">       </span>|<span class="string">   </span>|<span class="string">_ ...</span></span><br><span class="line"><span class="string">       </span>|</span><br><span class="line">       |<span class="string">_tasks</span></span><br><span class="line"><span class="string">       </span>|<span class="string">   </span>|</span><br><span class="line">       |<span class="string">   </span>|<span class="string">_main.yml</span></span><br><span class="line"><span class="string">       </span>|<span class="string">   </span>|<span class="string">_some_other_file.yml</span></span><br><span class="line"><span class="string">       </span>|<span class="string">   </span>|<span class="string">_ ...</span></span><br><span class="line"><span class="string">       </span>|</span><br><span class="line">       |<span class="string">_templates</span></span><br><span class="line"><span class="string">       </span>|<span class="string">   </span>|</span><br><span class="line">       |<span class="string">   </span>|<span class="string">_template1.j2</span></span><br><span class="line"><span class="string">       </span>|<span class="string">   </span>|<span class="string">_...</span></span><br><span class="line"><span class="string">       </span>|</span><br><span class="line">       |<span class="string">_vars</span></span><br><span class="line"><span class="string">           </span>|</span><br><span class="line">           |<span class="string">_main.yml</span></span><br><span class="line"><span class="string">           </span>|<span class="string">_some_other_file.yml</span></span><br><span class="line"><span class="string">           </span>|<span class="string">_ ...</span></span><br></pre></td></tr></table></figure></p><p>名为 <code>main.yml</code> 的文件不是强制的。 然而，当它们存在时，role 会自动将它们添加到剧本中。 您可以使用此文件运行包含其他任务、处理程序… 。 我们一会儿就知道了。</p><p>注意，还有一个 <code>vars</code> 和一个 <code>meta</code> 目录。 当你想把一堆关于 role 的变量。 然而，我不喜欢直接在角色中设置 vars。 我认为变量属于配置，而剧本是结构。 换句话说，我将剧本和角色视为工厂，将数据视为工厂的输入。 所以我真的更喜欢有“数据”(例如变量)以外的角色和发挥。 通过这种方式，我可以更容易地分享我的角色，而不用担心过多地暴露我的服务器。 但这只是个人偏好。 让你按照自己想要的方式去做。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="ansible" scheme="http://yoursite.com/tags/ansible/"/>
    
      <category term="翻译" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>翻译: ansible-tuto（10-11) </title>
    <link href="http://yoursite.com/2020/05/17/%E7%BF%BB%E8%AF%91-ansible-tuto%EF%BC%8810-11%EF%BC%89/"/>
    <id>http://yoursite.com/2020/05/17/%E7%BF%BB%E8%AF%91-ansible-tuto%EF%BC%8810-11%EF%BC%89/</id>
    <published>2020-05-17T02:08:12.000Z</published>
    <updated>2020-05-17T04:33:46.958Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h1 id="step-10-模板"><a href="#step-10-模板" class="headerlink" title="step-10 模板"></a>step-10 模板</h1><p>我们将使用 <code>haproxy</code> 作为负载平衡器。 当然，安装就像我们对 apache 所做的一样。 但是现在的配置有点复杂，因为我们需要在 haproxy 的配置中列出所有的 web 服务器。 我们怎么才能做到呢？</p><h3 id="HAProxy-配置template（模板"><a href="#HAProxy-配置template（模板" class="headerlink" title="HAProxy 配置template（模板)"></a>HAProxy 配置template（模板)</h3><p>Ansible 使用了 <a href="https://jinja.palletsprojects.com/en/2.11.x/" target="_blank" rel="noopener">Jinja2</a>, Python 的 一个模板引擎。 当您编写 Jinja2模板时，您可以使用 Ansible 定义的任何变量。</p><p>例如，如果您想输出模板当前生成的主机的库存名称，只需在 <code>jinja</code> 模板中写入 `&#123; inventory hostname &#125; </p><p>或者如果你需要第一个以太网接口的 IP 地址(多亏了 <code>setup</code> 模块，所以ansible 才知道) ，你只需要写:  &#123;&#123; ansible_default_ipv4.address &#125;&#125; (相当于  &#123;&#123; ansible_default_ipv4[‘address’] &#125;&#125; )</p><p>Jinja2模板还支持条件、 for-loop 等。</p><p>让我们创建一个 <code>templates/</code> 目录并在其中创建一个 jinja 模板。 我们称之为<code>haproxy.cfg.j2</code>。 我们使用 <code>.j2</code> 扩展名，以显示这是一个 Jinja2模板，但这是不必要的。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">    daemon</span><br><span class="line">    maxconn <span class="number">256</span></span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">    mode http</span><br><span class="line">    timeout connect <span class="number">5000</span>ms</span><br><span class="line">    timeout client <span class="number">50000</span>ms</span><br><span class="line">    timeout server <span class="number">50000</span>ms</span><br><span class="line"></span><br><span class="line">listen cluster</span><br><span class="line">    bind  &amp;#<span class="number">123</span>; &amp;#<span class="number">123</span>; ansible_host &amp;#<span class="number">125</span>;&amp;#<span class="number">125</span>;<span class="number">80</span></span><br><span class="line">    mode http</span><br><span class="line">    stats enable</span><br><span class="line">    balance roundrobin</span><br><span class="line"></span><br><span class="line">&amp;#<span class="number">123</span>;% <span class="keyword">for</span> backend <span class="keyword">in</span> groups[<span class="string">'web'</span>] %&amp;#<span class="number">125</span>;    server  &amp;#<span class="number">123</span>;&amp;#<span class="number">123</span>; hostvars[backend][<span class="string">'ansible_hostname'</span>] &amp;#<span class="number">125</span>;&amp;#<span class="number">125</span>; &amp;#<span class="number">123</span>;&amp;#<span class="number">123</span>; hostvars[backend].ansible_host &amp;#<span class="number">125</span>;&amp;#<span class="number">125</span>;check port <span class="number">80</span></span><br><span class="line">&amp;#<span class="number">123</span>;% endfor %&amp;#<span class="number">125</span>;    option httpchk HEAD /index.php HTTP/<span class="number">1.0</span></span><br></pre></td></tr></table></figure><ul><li>PS： 以上的<code>&amp;#123;</code>为<code>{</code>,<code>&amp;#125;</code>为<code>}</code>，均为markdown语法，这是因为 “&#123;&#123;  &#125;&#125;” 为当前博客模板所使用到的语法，不转义会发生错误</li></ul><p>我们这里有很多新奇事物</p><p>首先，” &#123;&#123; ansible host &#125;&#125;” 将被服务器的第二个 IP 替换，这个 IP 恰好是192.168.33.10。</p><p>然后，我们有一个循环。 此循环用于构建后端服务器列表。 它将循环遍历 <code>[web]组</code> 中列出的每个主机(并将此主机放入后端变量中)。 对于每个主机，它将使用主机的<code>facts</code> 呈现一行。 所有主机的 <code>facts</code> 都在 <code>hostvars</code> 变量中被设置，因此很容易访问其他主机变量(比如它的主机名或在本例中的 IP)。</p><p>我们可以用手写主机列表，因为我们只有两个主机。 但是我们希望这个服务器集群规模能够非常大，我们需要一百个这样的服务器。 因此，向配置中添加服务器或者交换一些服务器可以归结为从 <code>[web]</code> 组中添加或删除主机。</p><h3 id="Haproxy-的剧本"><a href="#Haproxy-的剧本" class="headerlink" title="Haproxy 的剧本"></a>Haproxy 的剧本</h3><p>我们已经完成了这项工作中最困难的部分，编写一个安装和配置 HAproxy 的剧本是一件轻而易举的事情:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- hosts:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">  gather_facts:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">haproxy</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Installs</span> <span class="string">haproxy</span> <span class="string">load</span> <span class="string">balancer</span></span><br><span class="line"><span class="attr">      apt:</span></span><br><span class="line"><span class="attr">        pkg:</span> <span class="string">haproxy</span></span><br><span class="line"><span class="attr">        state:</span> <span class="string">present</span></span><br><span class="line"><span class="attr">        update_cache:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Pushes</span> <span class="string">configuration</span></span><br><span class="line"><span class="attr">      template:</span></span><br><span class="line"><span class="attr">        src:</span> <span class="string">templates/haproxy.cfg.j2</span></span><br><span class="line"><span class="attr">        dest:</span> <span class="string">/etc/haproxy/haproxy.cfg</span></span><br><span class="line"><span class="attr">        mode:</span> <span class="number">0640</span></span><br><span class="line"><span class="attr">        owner:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">        group:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">      notify:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">restart</span> <span class="string">haproxy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Sets</span> <span class="string">default</span> <span class="string">starting</span> <span class="string">flag</span> <span class="string">to</span> <span class="number">1</span></span><br><span class="line"><span class="attr">      lineinfile:</span></span><br><span class="line"><span class="attr">        dest:</span> <span class="string">/etc/default/haproxy</span></span><br><span class="line"><span class="attr">        regexp:</span> <span class="string">"^ENABLED"</span></span><br><span class="line"><span class="attr">        line:</span> <span class="string">"ENABLED=1"</span></span><br><span class="line"><span class="attr">      notify:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">restart</span> <span class="string">haproxy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  handlers:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">restart</span> <span class="string">haproxy</span></span><br><span class="line"><span class="attr">      service:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">haproxy</span></span><br><span class="line"><span class="attr">        state:</span> <span class="string">restarted</span></span><br></pre></td></tr></table></figure><p>看起来很眼熟，是吧？ 这里唯一的新模块是 <code>template</code>，它具有与 <code>copy</code> 相同的参数。 我们还将这个剧本限制在 <code>group haproxy</code></p><p>现在… 让我们试试这个。 因为我们的库存只包含集群所需的主机，所以我们不需要限制主机列表，甚至可以同时运行两个剧本。 好吧，说实话，我们必须同时运行这两个服务器，因为 haproxy playbook 需要两个 web 服务器提供 <code>facts</code> 在步骤11中，我们将展示如何避免这种情况。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook -i step-10/hosts step-10/apache.yml step-10/haproxy.yml</span><br><span class="line"></span><br><span class="line">PLAY [web] *********************</span><br><span class="line"></span><br><span class="line">GATHERING FACTS *********************</span><br><span class="line">ok: [host1]</span><br><span class="line">ok: [host2]</span><br><span class="line"></span><br><span class="line">TASK: [Updates apt cache] *********************</span><br><span class="line">ok: [host1]</span><br><span class="line">ok: [host2]</span><br><span class="line"></span><br><span class="line">TASK: [Installs necessary packages] *********************</span><br><span class="line">ok: [host1] =&gt; (<span class="attribute">item</span>=apache2,libapache2-mod-php,git)</span><br><span class="line">ok: [host2] =&gt; (<span class="attribute">item</span>=apache2,libapache2-mod-php,git)</span><br><span class="line"></span><br><span class="line">TASK: [Push future<span class="built_in"> default </span>virtual host configuration] *********************</span><br><span class="line">ok: [host2]</span><br><span class="line">ok: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Activates our virtualhost] *********************</span><br><span class="line">changed: [host1]</span><br><span class="line">changed: [host2]</span><br><span class="line"></span><br><span class="line">TASK: [Check that our<span class="built_in"> config </span>is valid] *********************</span><br><span class="line">changed: [host1]</span><br><span class="line">changed: [host2]</span><br><span class="line"></span><br><span class="line">TASK: [Rolling back - Restoring old<span class="built_in"> default </span>virtualhost] *********************</span><br><span class="line">skipping: [host1]</span><br><span class="line">skipping: [host2]</span><br><span class="line"></span><br><span class="line">TASK: [Rolling back - Removing out virtualhost] *********************</span><br><span class="line">skipping: [host1]</span><br><span class="line">skipping: [host2]</span><br><span class="line"></span><br><span class="line">TASK: [Rolling back - Ending playbook] *********************</span><br><span class="line">skipping: [host1]</span><br><span class="line">skipping: [host2]</span><br><span class="line"></span><br><span class="line">TASK: [Deploy our awesome application] *********************</span><br><span class="line">ok: [host2]</span><br><span class="line">ok: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Deactivates the<span class="built_in"> default </span>virtualhost] *********************</span><br><span class="line">changed: [host1]</span><br><span class="line">changed: [host2]</span><br><span class="line"></span><br><span class="line">TASK: [Deactivates the<span class="built_in"> default </span>ssl virtualhost] *********************</span><br><span class="line">changed: [host2]</span><br><span class="line">changed: [host1]</span><br><span class="line"></span><br><span class="line">NOTIFIED: [restart apache] *********************</span><br><span class="line">changed: [host2]</span><br><span class="line">changed: [host1]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *********************</span><br><span class="line">host1              : <span class="attribute">ok</span>=10   <span class="attribute">changed</span>=5    <span class="attribute">unreachable</span>=0    <span class="attribute">failed</span>=0</span><br><span class="line">host2              : <span class="attribute">ok</span>=10   <span class="attribute">changed</span>=5    <span class="attribute">unreachable</span>=0    <span class="attribute">failed</span>=0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PLAY [haproxy] *********************</span><br><span class="line"></span><br><span class="line">GATHERING FACTS *********************</span><br><span class="line">ok: [host0]</span><br><span class="line"></span><br><span class="line">TASK: [Installs haproxy load balancer] *********************</span><br><span class="line">changed: [host0]</span><br><span class="line"></span><br><span class="line">TASK: [Pushes configuration] *********************</span><br><span class="line">changed: [host0]</span><br><span class="line"></span><br><span class="line">TASK: [Sets<span class="built_in"> default </span>starting flag <span class="keyword">to</span> 1] *********************</span><br><span class="line">changed: [host0]</span><br><span class="line"></span><br><span class="line">NOTIFIED: [restart haproxy] *********************</span><br><span class="line">changed: [host0]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *********************</span><br><span class="line">host0              : <span class="attribute">ok</span>=5    <span class="attribute">changed</span>=4    <span class="attribute">unreachable</span>=0    <span class="attribute">failed</span>=0</span><br></pre></td></tr></table></figure><p>看起来不错，现在去 <a href="http://192.168.33.10/" target="_blank" rel="noopener">http://192.168.33.10/</a> 看看结果，你的集群已经部署好了！</p><p>你甚至可以在 <a href="http://192.168.33.10/HAProxy?stats" target="_blank" rel="noopener">http://192.168.33.10/HAProxy?stats</a> 看到 HAProxy 的统计数据</p><p>现在进入 <code>step-11</code> 中关于“变量”的下一章。</p><h1 id="step-11-再次探索变量"><a href="#step-11-再次探索变量" class="headerlink" title="step-11 再次探索变量"></a>step-11 再次探索变量</h1><p>因此，我们已经设置了负载均衡器，它工作得非常好。 我们从 <code>facts</code> 中获取变量并使用它们来构建配置。 但是 Ansible 也支持其他类型的变量。 我们已经在库存中见过了 <code>ansible_host</code> ，但是现在我们将使用定义在在 <code>host_vars</code> 和 <code>group_vars</code> 文件中的变量。</p><h3 id="微调我们的-HAProxy-配置"><a href="#微调我们的-HAProxy-配置" class="headerlink" title="微调我们的 HAProxy 配置"></a>微调我们的 HAProxy 配置</h3><p>Haproxy 通常检查后端是否是活动的。 当一个后端看起来死了，它就会从后端池中删除，且 HAproxy 不再向它发送请求。</p><p>后端还可以有不同的权重(在0到256之间)。 权重越高，与其他后端相比，后端将接收的连接数量越多。 如果节点的能力不够强大，那么更好地传播流量是很有用的。</p><p>我们将使用变量来配置所有这些参数。</p><h3 id="Group-vars"><a href="#Group-vars" class="headerlink" title="Group vars"></a>Group vars</h3><p>Check interval 将在 haproxy 的 <code>group_vars</code> 文件中设置。 这将确保所有的 <code>haproxy</code> 将继承它。</p><p>我们只需要在库存目录下创建文件 <code>groups_vars/haproxy.yml</code>。 文件必须要以为其定义变量的组命名。 如果我们想为 web 组定义变量，那么这个文件应该命名为 <code>group _vars/web.xml</code></p><p><strong>请注意</strong>。 <code>.yml</code> 是可选的: 我们可以将 haproxy 的组变量文件命名为 <code>groups_vars/haproxy</code> 。这个扩展名只是帮助编辑器选择正确的语法使其高亮。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">haproxy_check_interval:</span> <span class="number">3000</span></span><br><span class="line"><span class="symbol">haproxy_stats_socket:</span> <span class="meta-keyword">/tmp/</span>sock</span><br></pre></td></tr></table></figure><p>这个名字是随意的。 当然，建议使用有意义的名称，这里没有什么必要的语法。 你甚至可以像这样使用 <code>complex variables</code>(也就是 Python dict) :</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">haproxy:</span></span><br><span class="line"><span class="symbol">    check_interval:</span> <span class="number">3000</span></span><br><span class="line"><span class="symbol">    stats_socket:</span> <span class="meta-keyword">/tmp/</span>sock</span><br></pre></td></tr></table></figure><p>这只是品味问题。 <code>complex variables</code> 可以更加有逻辑地分组东西。 在某些情况下，它们还可以合并随后定义的键(但是请注意，这不是默认的可合并行为)。 现在我们只使用简单的变量。</p><h3 id="Hosts-vars"><a href="#Hosts-vars" class="headerlink" title="Hosts vars"></a>Hosts vars</h3><p><code>Hosts vars</code> 遵循完全相同的规则，但是文件存储在 <code>host_vars</code> 目录下</p><p>让我们在 <code>hosts_vars/host1.example.com</code> 中定义后端的权重:<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">haproxy_backend_weight: <span class="number">100</span></span><br></pre></td></tr></table></figure></p><p>以及 <code>host_vars/host2.example.com</code>:<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">haproxy_backend_weight: <span class="number">150</span></span><br></pre></td></tr></table></figure></p><p>如果我们在 <code>group_vars/web</code> 中定义 haproxy 后端权重，它将被用作“缺省” : 在 <code>host_vars</code> 文件中定义的变量将覆盖 <code>group_vars</code> 中定义的变量。</p><h3 id="更新模板"><a href="#更新模板" class="headerlink" title="更新模板"></a>更新模板</h3><p>必须更新模板以使用这些变量。<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">    daemon</span><br><span class="line">    maxconn <span class="number">256</span></span><br><span class="line">&amp;#<span class="number">123</span>;% <span class="keyword">if</span> haproxy_stats_socket %&amp;#<span class="number">125</span>;    stats socket  &amp;#<span class="number">123</span>; &amp;#<span class="number">123</span>; haproxy_stats_socket &amp;#<span class="number">125</span>;&amp;#<span class="number">125</span>;&amp;#<span class="number">123</span>;% endif %&amp;#<span class="number">125</span>;</span><br><span class="line">defaults</span><br><span class="line">    mode http</span><br><span class="line">    timeout connect <span class="number">5000</span>ms</span><br><span class="line">    timeout client <span class="number">50000</span>ms</span><br><span class="line">    timeout server <span class="number">50000</span>ms</span><br><span class="line"></span><br><span class="line">listen cluster</span><br><span class="line">    bind  &amp;#<span class="number">123</span>; &amp;#<span class="number">123</span>; ansible_all_ipv4_addresses<span class="number">.1</span> &amp;#<span class="number">125</span>;&amp;#<span class="number">125</span>;<span class="number">80</span></span><br><span class="line">    mode http</span><br><span class="line">    stats enable</span><br><span class="line">    balance roundrobin</span><br><span class="line">&amp;#<span class="number">123</span>;% <span class="keyword">for</span> backend <span class="keyword">in</span> groups[<span class="string">'web'</span>] %&amp;#<span class="number">125</span>;    server  &amp;#<span class="number">123</span>; &amp;#<span class="number">123</span>; hostvars[backend][<span class="string">'ansible_hostname'</span>] &amp;#<span class="number">125</span>;&amp;#<span class="number">125</span>; &amp;#<span class="number">123</span>; &amp;#<span class="number">123</span>; hostvars[backend].ansible_all_ipv4_addresses<span class="number">.1</span> &amp;#<span class="number">125</span>;&amp;#<span class="number">125</span>;check port <span class="number">80</span></span><br><span class="line">&amp;#<span class="number">123</span>;% endfor %&amp;#<span class="number">125</span>;    option httpchk HEAD /index.php HTTP/<span class="number">1.0</span></span><br></pre></td></tr></table></figure></p><p><strong>注意</strong>，我们还引入了<code>&amp;#123;% if...</code> 。 只有在测试为真时，才会使用这个封闭的块。 因此，如果我们在某个地方为负载均衡器定义了 <code>haproxy_stats_socket</code> (我们甚至可以在命令行中使用 <code>--extra-vars“ haproxy_stats_sockets /tmp/sock”</code>) ，那么封闭其中的配置行将出现在生成的配置文件中(注意，建议的设置非常不安全!) </p><p>让我们试试看</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -i step<span class="number">-11</span>/hosts step<span class="number">-11</span>/haproxy.yml</span><br></pre></td></tr></table></figure><p>请注意，虽然我们可以，但是没有必要运行 apache 的剧本，因为什么都没有改变，但是我们不得不为此作弊。 以下是最新的 haproxy 剧本:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- hosts:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">  gather_facts:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">haproxy</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Installs</span> <span class="string">haproxy</span> <span class="string">load</span> <span class="string">balancer</span></span><br><span class="line"><span class="attr">      apt:</span></span><br><span class="line"><span class="attr">        pkg:</span> <span class="string">haproxy</span></span><br><span class="line"><span class="attr">        state:</span> <span class="string">present</span></span><br><span class="line"><span class="attr">        update_cache:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Pushes</span> <span class="string">configuration</span></span><br><span class="line"><span class="attr">      template:</span></span><br><span class="line"><span class="attr">        src:</span> <span class="string">templates/haproxy.cfg.j2</span></span><br><span class="line"><span class="attr">        dest:</span> <span class="string">/etc/haproxy/haproxy.cfg</span></span><br><span class="line"><span class="attr">        mode:</span> <span class="number">0640</span></span><br><span class="line"><span class="attr">        owner:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">        group:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">      notify:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">restart</span> <span class="string">haproxy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Sets</span> <span class="string">default</span> <span class="string">starting</span> <span class="string">flag</span> <span class="string">to</span> <span class="number">1</span></span><br><span class="line"><span class="attr">      lineinfile:</span></span><br><span class="line"><span class="attr">        dest:</span> <span class="string">/etc/default/haproxy</span></span><br><span class="line"><span class="attr">        regexp:</span> <span class="string">"^ENABLED"</span></span><br><span class="line"><span class="attr">        line:</span> <span class="string">"ENABLED=1"</span></span><br><span class="line"><span class="attr">      notify:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">restart</span> <span class="string">haproxy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  handlers:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">restart</span> <span class="string">haproxy</span></span><br><span class="line"><span class="attr">      service:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">haproxy</span></span><br><span class="line"><span class="attr">        state:</span> <span class="string">restarted</span></span><br></pre></td></tr></table></figure></p><p>看到了吗？ 我们在顶部为 web 主机添加了一个空的剧本。 它除了收集 <code>facts</code> 以外什么也不做。 但是它必须在这里，因为它将触发 <code>facts</code> 收集在主机上的群组网络。 这是必要的，因为 haproxy playbook 需要从这个组的主机中选择 <code>facts</code> 。 如果我们不这样做，ansible 可能会抱怨说 <code>ansible_all_ipv4_addresses</code>都不存在</p><p>请注意，我们已经在前面的步骤中提到了这一点，但是我们没有提到它。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="ansible" scheme="http://yoursite.com/tags/ansible/"/>
    
      <category term="翻译" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>翻译: ansible-tuto（08-09）</title>
    <link href="http://yoursite.com/2020/05/16/%E7%BF%BB%E8%AF%91-ansible-tuto%EF%BC%8808-09%EF%BC%89/"/>
    <id>http://yoursite.com/2020/05/16/%E7%BF%BB%E8%AF%91-ansible-tuto%EF%BC%8808-09%EF%BC%89/</id>
    <published>2020-05-16T02:26:11.000Z</published>
    <updated>2020-05-16T09:33:52.590Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h1 id="step08-从-git-部署我们的网站"><a href="#step08-从-git-部署我们的网站" class="headerlink" title="step08 从 git 部署我们的网站"></a>step08 从 git 部署我们的网站</h1><p>我们已经安装了 apache，设置了虚拟主机，并安全地重新启动了服务器。 现在我们将使用 git 模块来部署我们的应用程序。</p><h3 id="Git-模块"><a href="#Git-模块" class="headerlink" title="Git 模块"></a>Git 模块</h3><p>这是一个小放松，没有什么新的东西。<code>git</code> 模块只是另一个模块。 尽管我们只是为了好玩而尝试。当它涉及 <code>ansible-pull</code>以后，我们将更加熟悉它，</p><p>我们的虚拟机已经设置好了，但是我们需要一些更改来完成部署。 首先，我们正在部署一个 PHP 应用程序。 因此，我们需要安装 <code>libapache2-mod-php</code> 包。 其次，我们必须安装 git，因为 <code>git</code> 模块(用于克隆我们应用程序的 git 存储库)将使用它。</p><p>我们可以这样做:<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">- name: Installs apache web server</span><br><span class="line">  apt:</span><br><span class="line">    pkg: apache2</span><br><span class="line">    <span class="keyword">state</span>: present</span><br><span class="line">    update_cache: true</span><br><span class="line"></span><br><span class="line">- name: Installs php module</span><br><span class="line">  apt:</span><br><span class="line">    pkg: libapache2-mod-php</span><br><span class="line">    <span class="keyword">state</span>: present</span><br><span class="line"></span><br><span class="line">- name: Installs git</span><br><span class="line">  apt:</span><br><span class="line">    pkg: git</span><br><span class="line">    <span class="keyword">state</span>: present</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>但是 ansible 提供了一种更易读的编写方式。 Ansible 可以在一系列 <code>items</code> 上循环遍历，并在一个动作中使用每个 <code>item</code> :<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- hosts:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Installs</span> <span class="string">necessary</span> <span class="string">packages</span></span><br><span class="line"><span class="attr">      apt:</span></span><br><span class="line"><span class="attr">        pkg:</span> <span class="string">"<span class="template-variable">&#123;&#123; item &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">        state:</span> <span class="string">latest</span></span><br><span class="line"><span class="attr">        update_cache:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      with_items:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">apache2</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">libapache2-mod-php</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">git</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Push</span> <span class="string">future</span> <span class="string">default</span> <span class="string">virtual</span> <span class="string">host</span> <span class="string">configuration</span></span><br><span class="line"><span class="attr">      copy:</span></span><br><span class="line"><span class="attr">        src:</span> <span class="string">files/awesome-app</span></span><br><span class="line"><span class="attr">        dest:</span> <span class="string">/etc/apache2/sites-available/</span></span><br><span class="line"><span class="attr">        mode:</span> <span class="number">0640</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Activates</span> <span class="string">our</span> <span class="string">virtualhost</span></span><br><span class="line"><span class="attr">      command:</span> <span class="string">a2ensite</span> <span class="string">awesome-app</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Check</span> <span class="string">that</span> <span class="string">our</span> <span class="string">config</span> <span class="string">is</span> <span class="string">valid</span></span><br><span class="line"><span class="attr">      command:</span> <span class="string">apache2ctl</span> <span class="string">configtest</span></span><br><span class="line"><span class="attr">      register:</span> <span class="string">result</span></span><br><span class="line"><span class="attr">      ignore_errors:</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Rolling</span> <span class="string">back</span> <span class="bullet">-</span> <span class="string">Restoring</span> <span class="string">old</span> <span class="string">default</span> <span class="string">virtualhost</span></span><br><span class="line"><span class="attr">      command:</span> <span class="string">a2ensite</span> <span class="string">default</span></span><br><span class="line"><span class="attr">      when:</span> <span class="string">result</span> <span class="string">is</span> <span class="string">failed</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Rolling</span> <span class="string">back</span> <span class="bullet">-</span> <span class="string">Removing</span> <span class="string">out</span> <span class="string">virtualhost</span></span><br><span class="line"><span class="attr">      command:</span> <span class="string">a2dissite</span> <span class="string">awesome-app</span></span><br><span class="line"><span class="attr">      when:</span> <span class="string">result</span> <span class="string">is</span> <span class="string">failed</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Rolling</span> <span class="string">back</span> <span class="bullet">-</span> <span class="string">Ending</span> <span class="string">playbook</span></span><br><span class="line"><span class="attr">      fail:</span></span><br><span class="line"><span class="attr">        msg:</span> <span class="string">"Configuration file is not valid. Please check that before re-running the playbook."</span></span><br><span class="line"><span class="attr">      when:</span> <span class="string">result</span> <span class="string">is</span> <span class="string">failed</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Deploy</span> <span class="string">our</span> <span class="string">awesome</span> <span class="string">application</span></span><br><span class="line"><span class="attr">      git:</span></span><br><span class="line"><span class="attr">        repo:</span> <span class="attr">https://github.com/leucos/ansible-tuto-demosite.git</span></span><br><span class="line"><span class="attr">        dest:</span> <span class="string">/var/www/awesome-app</span></span><br><span class="line"><span class="attr">      tags:</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Deactivates</span> <span class="string">the</span> <span class="string">default</span> <span class="string">virtualhost</span></span><br><span class="line"><span class="attr">      command:</span> <span class="string">a2dissite</span> <span class="string">default</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Deactivates</span> <span class="string">the</span> <span class="string">default</span> <span class="string">ssl</span> <span class="string">virtualhost</span></span><br><span class="line"><span class="attr">      command:</span> <span class="string">a2dissite</span> <span class="string">default-ssl</span></span><br><span class="line"><span class="attr">      notify:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">restart</span> <span class="string">apache</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  handlers:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">restart</span> <span class="string">apache</span></span><br><span class="line"><span class="attr">      service:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">apache2</span></span><br><span class="line"><span class="attr">        state:</span> <span class="string">restarted</span></span><br></pre></td></tr></table></figure></p><p>接下来开始吧：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook -i step-08/hosts -l host1 step-08/apache.yml</span><br><span class="line"></span><br><span class="line">PLAY [web] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line"></span><br><span class="line">GATHERING FACTS <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">ok: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Updates apt cache] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">ok: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Installs necessary packages] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">changed: [host1] =&gt; (item=apache2,libapache2-mod-php,git)</span><br><span class="line"></span><br><span class="line">TASK: [Push future default virtual host configuration] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">changed: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Activates our virtualhost] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">changed: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Check that our config is valid] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">changed: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Rolling back - Restoring old default virtualhost] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">skipping: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Rolling back - Removing out virtualhost] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">skipping: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Rolling back - Ending playbook] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">skipping: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Deploy our awesome application] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">changed: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Deactivates the default virtualhost] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">changed: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Deactivates the default ssl virtualhost] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">changed: [host1]</span><br><span class="line"></span><br><span class="line">NOTIFIED: [restart apache] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">changed: [host1]</span><br><span class="line"></span><br><span class="line">PLAY RECAP <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">host1              : ok=10   changed=8    unreachable=0    failed=0</span><br></pre></td></tr></table></figure></p><p>你现在可以浏览 <a href="http://192.168.33.11，它应该会显示一张图片和服务器的主机名。" target="_blank" rel="noopener">http://192.168.33.11，它应该会显示一张图片和服务器的主机名。</a></p><p><strong>注意</strong> <code>tags: deploy</code>  这一行允许您只执行 playbook 的一部分。 比如说你为你的网站推出了一个新版本。 您希望加快处理速度，只执行处理 <code>deploy</code> 的部分。 标签允许你这样做。 当然，<code>deploy</code> 只是一个字符串，它没有任何特定的含义，可以是任何东西。 让我们来看看如何使用它:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook -i step-08/hosts -l host1 step-08/apache.yml -t deploy</span><br><span class="line">X11 forwarding request failed on channel 0</span><br><span class="line"></span><br><span class="line">PLAY [web] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line"></span><br><span class="line">GATHERING FACTS <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">ok: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Deploy our awesome application] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">changed: [host1]</span><br><span class="line"></span><br><span class="line">PLAY RECAP <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">host1              : ok=2    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure><p>让我们在 <code>step-09</code> 中部署另一个 web 服务器。</p><h1 id="step-09-添加另外一个-webserver"><a href="#step-09-添加另外一个-webserver" class="headerlink" title="step-09 添加另外一个 webserver"></a>step-09 添加另外一个 webserver</h1><p>我们已经有了一个 webserver，让我们添加另外一个</p><h3 id="更新库存文件"><a href="#更新库存文件" class="headerlink" title="更新库存文件"></a>更新库存文件</h3><p>由于我们对此抱有有很大的期望，我们将添加另一个 web 服务器和一个负载均衡器，我们将在下一步配置它。让我们完成它。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[web]</span><br><span class="line">host1 <span class="attribute">ansible_host</span>=192.168.33.11 <span class="attribute">ansible_user</span>=root</span><br><span class="line">host2 <span class="attribute">ansible_host</span>=192.168.33.12 <span class="attribute">ansible_user</span>=root</span><br><span class="line"></span><br><span class="line">[haproxy]</span><br><span class="line">host0 <span class="attribute">ansible_host</span>=192.168.33.10 <span class="attribute">ansible_user</span>=root</span><br></pre></td></tr></table></figure><p>请记住，<code>ansible_host</code> 在这里指定可接受的主机，因为主机的 IP 与预期的不同(或者无法解析)。 您可以将这些主机添加到您的 <code>/etc/hosts</code> 中，而不必担心，或者使用真正的主机名(这是典型情况下应该做的)。</p><h3 id="部署另一个-webserver"><a href="#部署另一个-webserver" class="headerlink" title="部署另一个 webserver"></a>部署另一个 webserver</h3><p>部署另一个 webserver 很简单</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook -i step-09/hosts step-09/apache.yml</span><br><span class="line"></span><br><span class="line">PLAY [web] *********************</span><br><span class="line"></span><br><span class="line">GATHERING FACTS *********************</span><br><span class="line">ok: [host2]</span><br><span class="line">ok: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Updates apt cache] *********************</span><br><span class="line">ok: [host1]</span><br><span class="line">ok: [host2]</span><br><span class="line"></span><br><span class="line">TASK: [Installs necessary packages] *********************</span><br><span class="line">ok: [host1] =&gt; (<span class="attribute">item</span>=apache2,libapache2-mod-php,git)</span><br><span class="line">changed: [host2] =&gt; (<span class="attribute">item</span>=apache2,libapache2-mod-php,git)</span><br><span class="line"></span><br><span class="line">TASK: [Push future<span class="built_in"> default </span>virtual host configuration] *********************</span><br><span class="line">ok: [host1]</span><br><span class="line">changed: [host2]</span><br><span class="line"></span><br><span class="line">TASK: [Activates our virtualhost] *********************</span><br><span class="line">changed: [host2]</span><br><span class="line">changed: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Check that our<span class="built_in"> config </span>is valid] *********************</span><br><span class="line">changed: [host2]</span><br><span class="line">changed: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Rolling back - Restoring old<span class="built_in"> default </span>virtualhost] *********************</span><br><span class="line">skipping: [host1]</span><br><span class="line">skipping: [host2]</span><br><span class="line"></span><br><span class="line">TASK: [Rolling back - Removing out virtualhost] *********************</span><br><span class="line">skipping: [host1]</span><br><span class="line">skipping: [host2]</span><br><span class="line"></span><br><span class="line">TASK: [Rolling back - Ending playbook] *********************</span><br><span class="line">skipping: [host1]</span><br><span class="line">skipping: [host2]</span><br><span class="line"></span><br><span class="line">TASK: [Deploy our awesome application] *********************</span><br><span class="line">ok: [host1]</span><br><span class="line">changed: [host2]</span><br><span class="line"></span><br><span class="line">TASK: [Deactivates the<span class="built_in"> default </span>virtualhost] *********************</span><br><span class="line">changed: [host1]</span><br><span class="line">changed: [host2]</span><br><span class="line"></span><br><span class="line">TASK: [Deactivates the<span class="built_in"> default </span>ssl virtualhost] *********************</span><br><span class="line">changed: [host2]</span><br><span class="line">changed: [host1]</span><br><span class="line"></span><br><span class="line">NOTIFIED: [restart apache] *********************</span><br><span class="line">changed: [host1]</span><br><span class="line">changed: [host2]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *********************</span><br><span class="line">host1              : <span class="attribute">ok</span>=10   <span class="attribute">changed</span>=5    <span class="attribute">unreachable</span>=0    <span class="attribute">failed</span>=0</span><br><span class="line">host2              : <span class="attribute">ok</span>=10   <span class="attribute">changed</span>=8    <span class="attribute">unreachable</span>=0    <span class="attribute">failed</span>=0</span><br></pre></td></tr></table></figure><p>我们所要做的就是从命令行中移除 <code>-l host1</code>。 记住 <code>-l</code> 是一个参数，它限制了 playbook 在特定主机上运行。 现在我们不再限制，它将运行在所有的主机上，在这些主机上的剧本打算运行(即 web组)。</p><p>如果我们在 group <code>web</code> 中有其他服务器，但是希望将 playbook 限制为一个子集，我们可以使用，例如:<code>-l firstthost: secondhost:...</code></p><p>现在我们已经有了这个不错的 web 服务器组，让我们通过在 <code>step-10</code> 中在它们前面放置一个负载均衡器，将它变成为一个集群。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="ansible" scheme="http://yoursite.com/tags/ansible/"/>
    
      <category term="翻译" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>翻译: ansible-tuto（06-07）</title>
    <link href="http://yoursite.com/2020/05/15/%E7%BF%BB%E8%AF%91-ansible-tuto%EF%BC%8806-07%EF%BC%89/"/>
    <id>http://yoursite.com/2020/05/15/%E7%BF%BB%E8%AF%91-ansible-tuto%EF%BC%8806-07%EF%BC%89/</id>
    <published>2020-05-15T12:30:46.000Z</published>
    <updated>2020-05-15T13:32:49.731Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h1 id="step-06-当配置正确时重新启动"><a href="#step-06-当配置正确时重新启动" class="headerlink" title="step-06 当配置正确时重新启动"></a>step-06 当配置正确时重新启动</h1><p>我们已经安装了 apache，配置了虚拟主机，并重新启动了服务器。 但是，如果我们只是希望在配置正确的情况下重新启动服务器，那又会怎样呢？ 让我们开始吧</p><h3 id="当出现问题的时候停止工作"><a href="#当出现问题的时候停止工作" class="headerlink" title="当出现问题的时候停止工作"></a>当出现问题的时候停止工作</h3><p>ansible 有一个俏皮的特性: 如果出现问题，它将停止所有的工作。 如果配置文件无效的话，我们将利用这个特性来停止我们的 playbook。</p><p>让我们修改一下我们的 <code>awesome-app</code> 虚拟主机配置文件:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">  RocumentDoot /<span class="keyword">var</span>/www/awesome-<span class="keyword">app</span></span><br><span class="line"></span><br><span class="line">  Options -Indexes</span><br><span class="line"></span><br><span class="line">  ErrorLog /<span class="keyword">var</span>/<span class="keyword">log</span>/apache2/<span class="keyword">error</span>.<span class="built_in">log</span></span><br><span class="line">  TransferLog /<span class="keyword">var</span>/<span class="keyword">log</span>/apache2/access.<span class="built_in">log</span></span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></p><p>如前所述，当任务失败时，处理过程停止。 因此，在重新启动服务器之前，我们将确保配置有效。 我们还可以在删除缺省的虚拟主机之前添加虚拟主机，这样随后的重新启动(可能直接在服务器上完成)就不会破坏 apache。</p><p>请注意，我们一开始就应该这样做。 因为我们已经运行了我们的剧本，默认的虚拟主机已经被停用了。 当然，其他无关的主机也可以使用这个剧本，让我们保护他们。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">- hosts: web</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Installs apache web server</span><br><span class="line">      apt:</span><br><span class="line">        pkg: apache2</span><br><span class="line">        state: present</span><br><span class="line">        update_cache: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    - name: Push future<span class="built_in"> default </span>virtual host configuration</span><br><span class="line">      copy:</span><br><span class="line">        src: files/awesome-app</span><br><span class="line">        dest: /etc/apache2/sites-available/</span><br><span class="line">        mode: 0640</span><br><span class="line"></span><br><span class="line">    - name: Activates our virtualhost</span><br><span class="line">      command: a2ensite awesome-app</span><br><span class="line"></span><br><span class="line">    - name: Check that our<span class="built_in"> config </span>is valid</span><br><span class="line">      command: apache2ctl configtest</span><br><span class="line"></span><br><span class="line">    - name: Deactivates the<span class="built_in"> default </span>virtualhost</span><br><span class="line">      command: a2dissite default</span><br><span class="line"></span><br><span class="line">    - name: Deactivates the<span class="built_in"> default </span>ssl virtualhost</span><br><span class="line">      command: a2dissite default-ssl</span><br><span class="line">      notify:</span><br><span class="line">        - restart apache</span><br><span class="line"></span><br><span class="line">  handlers:</span><br><span class="line">    - name: restart apache</span><br><span class="line">      service:</span><br><span class="line">        name: apache2</span><br><span class="line">        state: restarted</span><br></pre></td></tr></table></figure><p>接下来开始吧：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">PLAY [web] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line"></span><br><span class="line">GATHERING FACTS <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">ok: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Installs apache web server] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">ok: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Push future default virtual host configuration] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">changed: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Activates our virtualhost] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">changed: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Check that our config is valid] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">failed: [host1] =&gt; &#123;"changed": true, "cmd": ["apache2ctl", "configtest"], "delta": "0:00:00.045046", "end": "2013-03-08 16:09:32.002063", "rc": 1, "start": "2013-03-08 16:09:31.957017"&#125;</span><br><span class="line">stderr: Syntax error on line 2 of /etc/apache2/sites-enabled/awesome-app:</span><br><span class="line">Invalid command 'RocumentDoot', perhaps misspelled or defined by a module not included in the server configuration</span><br><span class="line">stdout: Action 'configtest' failed.</span><br><span class="line">The Apache error log may have more information.</span><br><span class="line"></span><br><span class="line">FATAL: all hosts have already failed -- aborting</span><br><span class="line"></span><br><span class="line">PLAY RECAP <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">host1              : ok=4    changed=2    unreachable=0    failed=1</span><br></pre></td></tr></table></figure></p><p>正如您可以看到的，因为 apache2ctl 在失败时返回退出代码为1，ansible 发现了这一点并停止了处理。 太好了！</p><p>嗯，实际上不是很好… 我们的虚拟主机已经添加了。 任何后续的 apache 重新启动都会抱怨我们的配置，然后退出。 因此，我们需要一种方法来发现故障并返回。</p><h1 id="step-07-使用条件语句"><a href="#step-07-使用条件语句" class="headerlink" title="step-07 使用条件语句"></a>step-07 使用条件语句</h1><p>我们已经安装了 apache，设置了虚拟主机，并重新启动了服务器。 但是，我们希望在出现问题时，能够将其恢复到稳定状态。</p><h3 id="当出错时回滚"><a href="#当出错时回滚" class="headerlink" title="当出错时回滚"></a>当出错时回滚</h3><p>提醒一句: 这里没有魔法。 之前配置错误不是 <code>ansible</code> 的错误。 它不是一个备份系统，它不能回滚所有的东西。 你的工作就是确保你的剧本是配置正确的。 ansible 不知道如何恢复一个<code>2ensite awesome-app</code>。</p><p>但是，如果我们关注配置错误时于怎么回滚，那么就可以利用它进行回滚</p><p>如前所述，当任务失败时，处理就会停止… 除非我们接受失败(我们应该接受)。 这就是我们要做的: 如果出现故障，继续处理，但是只恢复我们已经完成的操作。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">- hosts: web</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Installs apache web server</span><br><span class="line">      apt:</span><br><span class="line">        pkg: apache2</span><br><span class="line">        state: present</span><br><span class="line">        update_cache: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    - name: Push future<span class="built_in"> default </span>virtual host configuration</span><br><span class="line">      copy:</span><br><span class="line">        src: files/awesome-app</span><br><span class="line">        dest: /etc/apache2/sites-available/</span><br><span class="line">        mode: 0640</span><br><span class="line"></span><br><span class="line">    - name: Activates our virtualhost</span><br><span class="line">      command: a2ensite awesome-app</span><br><span class="line"></span><br><span class="line">    - name: Check that our<span class="built_in"> config </span>is valid</span><br><span class="line">      command: apache2ctl configtest</span><br><span class="line">      register: result</span><br><span class="line">      ignore_errors: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    - name: Rolling back - Restoring old<span class="built_in"> default </span>virtualhost</span><br><span class="line">      command: a2ensite default</span><br><span class="line">      when: result is failed</span><br><span class="line"></span><br><span class="line">    - name: Rolling back - Removing our virtualhost</span><br><span class="line">      command: a2dissite awesome-app</span><br><span class="line">      when: result is failed</span><br><span class="line"></span><br><span class="line">    - name: Rolling back - Ending playbook</span><br><span class="line">      fail:</span><br><span class="line">        msg: <span class="string">"Configuration file is not valid. Please check that before re-running the playbook."</span></span><br><span class="line">      when: result is failed</span><br><span class="line"></span><br><span class="line">    - name: Deactivates the<span class="built_in"> default </span>virtualhost</span><br><span class="line">      command: a2dissite default</span><br><span class="line"></span><br><span class="line">    - name: Deactivates the<span class="built_in"> default </span>ssl virtualhost</span><br><span class="line">      command: a2dissite default-ssl</span><br><span class="line">      notify:</span><br><span class="line">        - restart apache</span><br><span class="line"></span><br><span class="line">  handlers:</span><br><span class="line">    - name: restart apache</span><br><span class="line">      service:</span><br><span class="line">        name: apache2</span><br><span class="line">        state: restarted</span><br></pre></td></tr></table></figure></p><p><code>register</code> 关键字记录 <code>apache2ctl configtest</code> 命令(exit status、 stdout、 stderr、 …)的输出，以及 <code>when: result is failed</code> 检查注册变量(<code>result</code>)是否失败。</p><p>接下来开始吧：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook -i step-07/hosts -l host1 step-07/apache.yml</span><br><span class="line"></span><br><span class="line">PLAY [web] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line"></span><br><span class="line">GATHERING FACTS <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">ok: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Installs apache web server] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">ok: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Push future default virtual host configuration] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">ok: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Activates our virtualhost] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">changed: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Check that our config is valid] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">failed: [host1] =&gt; &#123;"changed": true, "cmd": ["apache2ctl", "configtest"], "delta": "0:00:00.051874", "end": "2013-03-10 10:50:17.714105", "rc": 1, "start": "2013-03-10 10:50:17.662231"&#125;</span><br><span class="line">stderr: Syntax error on line 2 of /etc/apache2/sites-enabled/awesome-app:</span><br><span class="line">Invalid command 'RocumentDoot', perhaps misspelled or defined by a module not included in the server configuration</span><br><span class="line">stdout: Action 'configtest' failed.</span><br><span class="line">The Apache error log may have more information.</span><br><span class="line">...ignoring</span><br><span class="line"></span><br><span class="line">TASK: [Rolling back - Restoring old default virtualhost] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">changed: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Rolling back - Removing our virtualhost] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">changed: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Rolling back - Ending playbook] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">failed: [host1] =&gt; &#123;"failed": true&#125;</span><br><span class="line">msg: Configuration file is not valid. Please check that before re-running the playbook.</span><br><span class="line"></span><br><span class="line">FATAL: all hosts have already failed -- aborting</span><br><span class="line"></span><br><span class="line">PLAY RECAP <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">host1              : ok=7    changed=4    unreachable=0    failed=1</span><br></pre></td></tr></table></figure></p><p>看起来正常工作。让我们尝试重新启动 apache，看看它是否真的工作:</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ansible -i step-<span class="number">07</span>/hosts -m service -a 'name=apache2 <span class="keyword">state</span>=restarted' host1</span><br><span class="line"></span><br><span class="line"><span class="keyword">state</span>=restarted' host1</span><br><span class="line">host1 | success &gt;&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: true,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"apache2"</span>,</span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"started"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，现在我们的 apache 安全了，不会出现配置错误。</p><p>虽然这看起来需要做很多工作，但其实不然。 请记住，您几乎可以在任何地方使用变量，因此很容易将其作为 apache 的通用模板，并在任何地方使用它来部署虚拟主机。 创建一次剧本，就可在任何地方使用。 我们将在步骤9中完成这项工作，但是现在，让我们在步骤08中使用 git 部署我们的 web 站点。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="ansible" scheme="http://yoursite.com/tags/ansible/"/>
    
      <category term="翻译" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>翻译: ansible-tuto（04-05）</title>
    <link href="http://yoursite.com/2020/05/13/%E7%BF%BB%E8%AF%91-ansible-tuto%EF%BC%8804-05%EF%BC%89/"/>
    <id>http://yoursite.com/2020/05/13/%E7%BF%BB%E8%AF%91-ansible-tuto%EF%BC%8804-05%EF%BC%89/</id>
    <published>2020-05-13T01:13:42.000Z</published>
    <updated>2020-05-13T03:38:40.917Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h1 id="step04-Ansible-playbooks"><a href="#step04-Ansible-playbooks" class="headerlink" title="step04 Ansible playbooks"></a>step04 Ansible playbooks</h1><p>Playbook 的概念非常简单: 它只是一系列可接受的命令(tasks) ，就像我们使用 <code>ansible</code> CLI 工具时所使用的那样。 这些任务针对一组特定的主机/组。</p><p>这个步骤所需的文件应该已经神奇地出现(自带有)，甚至不需要输入它们</p><h3 id="Apache-示例-也就是-Ansible-的“-Hello-World-”"><a href="#Apache-示例-也就是-Ansible-的“-Hello-World-”" class="headerlink" title="Apache 示例(也就是 Ansible 的“ Hello World! ”)"></a>Apache 示例(也就是 Ansible 的“ Hello World! ”)</h3><p>我们假设我们有以下库存文件(让我们把它命名为<code>hosts</code>) :<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[web]</span></span><br><span class="line">host1</span><br></pre></td></tr></table></figure></p><p>所有的主机都是基于 debian 的</p><p><strong>注意</strong>: 请记住您可以(在我们的练习中我们这样做)使用 <code>ansible_host</code> 来设置主机的真实 IP。 您还可以更改库存并使用真正的主机名。 在任何情况下，使用一个非关键的机器测试！ 在真正的主机文件中，我们还有<code>ansible_user=root</code> 来处理潜在的不同的ansible 默认配置(ansible.cfg的默认用户为root,但可能被修改过)</p><p>让我们构建一个将在 <code>web</code> 组中的机器上安装 apache 的剧本。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- hosts: web</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Installs apache web server</span><br><span class="line">      apt:</span><br><span class="line">        pkg: apache2</span><br><span class="line">        state: present</span><br><span class="line">        update_cache: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>我们只需要使用 <code>apt</code> 模块正确说出我们想要做什么。 这里，我们使用 <a href="https://docs.ansible.com/ansible/latest/modules/apt_module.html" target="_blank" rel="noopener">apt</a> 模块来安装 debian 软件包。 我们还要求此模块更新包缓存。</p><p>我们还为这个任务添加了一个名称。 虽然这是不必要的，但是在剧本运行时它提供了很多信息，所以强烈推荐使用。</p><p>总而言之，这是相当容易的！</p><p>您现在可以运行 playbook (让我们称之为 <code>apache.yml</code>) :<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -i step<span class="number">-04</span>/hosts -l host1 step<span class="number">-04</span>/apache.yml</span><br></pre></td></tr></table></figure></p><p>在这里，<code>step-04/hosts</code> 是库存文件,<code>-l</code> 将限制只在主机 <code>host1</code>上运行，<code>apache.yml</code> 是我们的剧本。</p><p>当你运行上面的命令时，你应该会看到这样的东西:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PLAY [web] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line"></span><br><span class="line">GATHERING FACTS <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">ok: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Installs apache web server] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">changed: [host1]</span><br><span class="line"></span><br><span class="line">PLAY RECAP <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">host1              : ok=2    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure></p><p>让我们分析一次一行的输出<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PLAY [web] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br></pre></td></tr></table></figure></p><p>告诉我们它正在主机<code>web</code>上运行。 <code>playbook</code>是一套与<code>hosts</code>有关的可接受的指令。 如果我们有另一个<code>- host: blah</code>: 在我们的剧本中，它也会运行(但是只会在第一个剧本结束之后，一个剧本文件可以有包含多个剧本)</p><p>还记得我们使用 <code>setup</code> 模块的时候吗？ 每次运行之前，ansible 都在指定的主机上运行它，以收集事实。 如果因为不需要主机提供任何信息而不需要这样做，那么您可以添加 <code>gather_facts: no</code> 语段在主机条目的下面(与 <code>tasks:</code>相同缩进长度)。</p><p>接下来，是真正的任务: 我们的(第一个也是唯一的)任务正在运行，因为它表示<code>changed</code>，所以我们知道它改变了 host1上的某些内容。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PLAY RECAP *********************</span><br><span class="line">host1              : <span class="attribute">ok</span>=2    <span class="attribute">changed</span>=1    <span class="attribute">unreachable</span>=0    <span class="attribute">failed</span>=0</span><br></pre></td></tr></table></figure><p>最后，ansible 输出发生了什么: 两个任务已经运行，其中一个在主机上改变了一些东西(我们的 apache 任务，setup 模块没有改变任何东西)。</p><p>现在让我们再运行一次，看看会发生什么:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook -i step-04/hosts -l host1 step-04/apache.yml</span><br><span class="line"></span><br><span class="line">PLAY [web] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line"></span><br><span class="line">GATHERING FACTS <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">ok: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Installs apache web server] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">ok: [host1]</span><br><span class="line"></span><br><span class="line">PLAY RECAP <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">host1              : ok=2    changed=0    unreachable=0    failed=0</span><br></pre></td></tr></table></figure></p><p>现在‘ changed’是‘0’。 这是绝对正常的，也是 <code>ansible</code> 的核心特征之一: 只有在有事情可做的时候，剧本才会采取行动。这就是所谓的幂等性，也就是说你可以随心所欲地运行你的剧本，你最终总是会处于相同的状态(当然，除非你用 shell 模块做了一些疯狂的事情，但这超出了 ansible 的控制范围)</p><h3 id="完善剧本"><a href="#完善剧本" class="headerlink" title="完善剧本"></a>完善剧本</h3><p>当然，我们的剧本可以安装 apache 服务器，但它可以更完整一点。它可以添加一个虚拟主机，确保重新启动 apache。它甚至可以从 git 仓库部署我们的网站</p><h1 id="step-05-完善-apache-设置"><a href="#step-05-完善-apache-设置" class="headerlink" title="step-05 完善 apache 设置"></a>step-05 完善 apache 设置</h1><p>我们已经安装了 apache，现在让我们设置虚拟主机。</p><h3 id="完善剧本-1"><a href="#完善剧本-1" class="headerlink" title="完善剧本"></a>完善剧本</h3><p>我们的服务器上只需要一个虚拟主机，但我们希望用更具体的东西替换默认主机。因此，我们必须移除当前(可能是默认的)虚拟主机，发送至虚拟机，激活它并重新启动 apache。</p><p>让我们创建一个名为 <code>files</code> 的目录，并为 host1添加虚拟主机配置，我们称之为 <code>awesome-app</code>:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">  DocumentRoot /<span class="keyword">var</span>/www/awesome-<span class="keyword">app</span></span><br><span class="line"></span><br><span class="line">  Options -Indexes</span><br><span class="line"></span><br><span class="line">  ErrorLog /<span class="keyword">var</span>/<span class="keyword">log</span>/apache2/<span class="keyword">error</span>.<span class="built_in">log</span></span><br><span class="line">  TransferLog /<span class="keyword">var</span>/<span class="keyword">log</span>/apache2/access.<span class="built_in">log</span></span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></p><p>现在，快速更新一下我们的 apache 剧本，我们准备好了:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">- hosts: web</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Installs apache web server</span><br><span class="line">      apt:</span><br><span class="line">        pkg: apache2</span><br><span class="line">        state: present</span><br><span class="line">        update_cache: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    - name: Push<span class="built_in"> default </span>virtual host configuration</span><br><span class="line">      copy:</span><br><span class="line">        src: files/awesome-app</span><br><span class="line">        dest: /etc/apache2/sites-available/awesome-app</span><br><span class="line">        mode: 0640</span><br><span class="line"></span><br><span class="line">    - name: <span class="builtin-name">Disable</span> the<span class="built_in"> default </span>virtualhost</span><br><span class="line">      file:</span><br><span class="line">        dest: /etc/apache2/sites-enabled/default</span><br><span class="line">        state: absent</span><br><span class="line">      notify:</span><br><span class="line">        - restart apache</span><br><span class="line"></span><br><span class="line">    - name: <span class="builtin-name">Disable</span> the<span class="built_in"> default </span>ssl virtualhost</span><br><span class="line">      file:</span><br><span class="line">        dest: /etc/apache2/sites-enabled/default-ssl</span><br><span class="line">        state: absent</span><br><span class="line">      notify:</span><br><span class="line">        - restart apache</span><br><span class="line"></span><br><span class="line">    - name: Activates our virtualhost</span><br><span class="line">      file:</span><br><span class="line">        src: /etc/apache2/sites-available/awesome-app</span><br><span class="line">        dest: /etc/apache2/sites-enabled/awesome-app</span><br><span class="line">        state: link</span><br><span class="line">      notify:</span><br><span class="line">        - restart apache</span><br><span class="line"></span><br><span class="line">  handlers:</span><br><span class="line">    - name: restart apache</span><br><span class="line">      service:</span><br><span class="line">        name: apache2</span><br><span class="line">        state: restarted</span><br></pre></td></tr></table></figure><p>我们开始吧:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook -i step-05/hosts -l host1 step-05/apache.yml</span><br><span class="line"></span><br><span class="line">PLAY [web] *********************</span><br><span class="line"></span><br><span class="line">GATHERING FACTS *********************</span><br><span class="line">ok: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Installs apache web server] *********************</span><br><span class="line">ok: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Push<span class="built_in"> default </span>virtual host configuration] *********************</span><br><span class="line">changed: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [<span class="builtin-name">Disable</span> the<span class="built_in"> default </span>virtualhost] *********************</span><br><span class="line">changed: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [<span class="builtin-name">Disable</span> the<span class="built_in"> default </span>ssl virtualhost] *********************</span><br><span class="line">changed: [host1]</span><br><span class="line"></span><br><span class="line">TASK: [Activates our virtualhost] *********************</span><br><span class="line">changed: [host1]</span><br><span class="line"></span><br><span class="line">NOTIFIED: [restart apache] *********************</span><br><span class="line">changed: [host1]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *********************</span><br><span class="line">host1              : <span class="attribute">ok</span>=7    <span class="attribute">changed</span>=5    <span class="attribute">unreachable</span>=0    <span class="attribute">failed</span>=0</span><br></pre></td></tr></table></figure><p>太酷了！好吧，想想看，我们有点操之过急了。在重新启动 apache 之前，我们是否应该检查一下配置是否正常？这样，如果配置文件不正确，我们就不会中断服务。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="ansible" scheme="http://yoursite.com/tags/ansible/"/>
    
      <category term="翻译" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>翻译: ansible-tuto（02-03）</title>
    <link href="http://yoursite.com/2020/05/10/%E7%BF%BB%E8%AF%91-ansible-tuto%EF%BC%8802-03%EF%BC%89/"/>
    <id>http://yoursite.com/2020/05/10/%E7%BF%BB%E8%AF%91-ansible-tuto%EF%BC%8802-03%EF%BC%89/</id>
    <published>2020-05-10T12:32:28.000Z</published>
    <updated>2020-05-11T02:43:05.923Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h1 id="step-02-talking-to-nodes"><a href="#step-02-talking-to-nodes" class="headerlink" title="step-02 talking to nodes"></a>step-02 talking to nodes</h1><p>现在我们可以开始了。 让我们用上一章中看到的命令: <code>anable</code> 这个命令是ansible提供的与节点交互的三个命令中的一个</p><h3 id="做些有用的事情"><a href="#做些有用的事情" class="headerlink" title="做些有用的事情"></a>做些有用的事情</h3><p>在前面的命令中,<code>-m ping</code> 的意思是“使用 ping模块”，这个模块是可用的许多模块之一。 <code>Ping</code> 模块非常简单，不需要任何参数。 接受参数的模块通过 <code>-a</code> 来传递参数，让我们看看其他一些模块</p><h3 id="shell模块"><a href="#shell模块" class="headerlink" title="shell模块"></a>shell模块</h3><p>这个模块允许你在远程主机上执行一个 shell 命令:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible -<span class="selector-tag">i</span> step-<span class="number">02</span>/hosts -m shell -<span class="selector-tag">a</span> <span class="string">'uname -a'</span> host0</span><br></pre></td></tr></table></figure></p><p>输出应该是这样的:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>cool!</p><h3 id="copy模块"><a href="#copy模块" class="headerlink" title="copy模块"></a>copy模块</h3><p>毫无疑问，使用这个模块，您可以将文件从控制机复制到节点，假设我们要将 <code>/etc/hosts</code> 复制到目标节点的 <code>/tmp</code>:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible -<span class="selector-tag">i</span> step-<span class="number">02</span>/hosts -m copy -<span class="selector-tag">a</span> <span class="string">'src=/etc/hosts dest=/tmp/'</span> host0</span><br></pre></td></tr></table></figure></p><p>输出应该类似于:<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">host0 <span class="string">| success &gt;&gt; &#123;</span></span><br><span class="line">    <span class="string">"changed"</span>: true,</span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"/tmp/hosts"</span>,</span><br><span class="line">    <span class="string">"group"</span>: <span class="string">"root"</span>,</span><br><span class="line">    <span class="string">"md5sum"</span>: <span class="string">"d41d8cd98f00b204e9800998ecf8427e"</span>,</span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"0644"</span>,</span><br><span class="line">    <span class="string">"owner"</span>: <span class="string">"root"</span>,</span><br><span class="line">    <span class="string">"size"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"src"</span>: <span class="string">"/root/.ansible/tmp/ansible-1362910475.9-246937081757218/source"</span>,</span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"file"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Ansible (更准确地说是在节点上执行的复制模块)以 JSON 格式回复了大量有用的信息,我们稍后将看到如何使用它。</p><p>我们将在下面看到其他有用的模块,有一个巨大的<a href="https://docs.ansible.com/ansible/latest/modules/list_of_all_modules.html），几乎涵盖了你可以在系统上做的任何事情。 如果您找不到合适的模块，那么编写一个模块非常简单(甚至不必是 Python，只需要使用 JSON" target="_blank" rel="noopener">模块仓库</a></p><h3 id="对不同的主机使用相同的命令"><a href="#对不同的主机使用相同的命令" class="headerlink" title="对不同的主机使用相同的命令"></a>对不同的主机使用相同的命令</h3><p>好的，上面的内容很有趣，但是我们有很多节点需要管理。让我们在其他主机上也尝试一下</p><p>让我们假设我们想要得到一些关于节点的信息，例如，想知道我们在节点上部署了哪个 Ubuntu 版本，这很简单:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible -<span class="selector-tag">i</span> step-<span class="number">02</span>/hosts -m shell -<span class="selector-tag">a</span> <span class="string">'grep DISTRIB_RELEASE /etc/lsb-release'</span> all</span><br></pre></td></tr></table></figure></p><p>All 是一个快捷方式，意思是“在目录文件中找到的所有主机”。它会返回:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">host1 | success | <span class="attribute">rc</span>=0 &gt;&gt;</span><br><span class="line"><span class="attribute">DISTRIB_RELEASE</span>=14.04</span><br><span class="line"></span><br><span class="line">host2 | success | <span class="attribute">rc</span>=0 &gt;&gt;</span><br><span class="line"><span class="attribute">DISTRIB_RELEASE</span>=14.04</span><br><span class="line"></span><br><span class="line">host0 | success | <span class="attribute">rc</span>=0 &gt;&gt;</span><br><span class="line"><span class="attribute">DISTRIB_RELEASE</span>=14.04</span><br></pre></td></tr></table></figure><h3 id="更多的facts（信息）"><a href="#更多的facts（信息）" class="headerlink" title="更多的facts（信息）"></a>更多的facts（信息）</h3><p>这很简单，然而，如果我们想要更多的信息(ip 地址，RAM 大小等等)，它会很快变得很麻烦. 这个解决方案来自另一个非常方便的模块，叫做<code>setup</code>: 它专门收集节点的facts（信息）</p><p>尝试一下:<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible -i <span class="built_in">step</span><span class="number">-02</span>/hosts -m <span class="built_in">setup</span> host0</span><br></pre></td></tr></table></figure></p><p>提供大量信息:<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">    <span class="string">"ansible_all_ipv4_addresses"</span>: [</span><br><span class="line">        <span class="string">"192.168.0.60"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"ansible_all_ipv6_addresses"</span>: [],</span><br><span class="line">    <span class="string">"ansible_architecture"</span>: <span class="string">"x86_64"</span>,</span><br><span class="line">    <span class="string">"ansible_bios_date"</span>: <span class="string">"01/01/2007"</span>,</span><br><span class="line">    <span class="string">"ansible_bios_version"</span>: <span class="string">"Bochs"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">---snip---</span></span><br><span class="line">    <span class="string">"ansible_virtualization_role"</span>: <span class="string">"guest"</span>,</span><br><span class="line">    <span class="string">"ansible_virtualization_type"</span>: <span class="string">"kvm"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"changed"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">"verbose_override"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>为了简短起见，对它进行了截断，但是您可以在返回的数据中找到许多有趣的,您还可以过滤返回的键，以防您正在寻找某些特定的东西。</p><p>例如，让我们假设你想知道你在所有主机上有多少内存，简单地使用 <code>ansible -i step-02/hosts -m setup -a &quot;filter= ansible_memtotal_mb&quot; all:</code></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">host2 <span class="string">| success &gt;&gt; &#123;</span></span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"ansible_memtotal_mb"</span>: <span class="number">187</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"changed"</span>: false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">host1 <span class="string">| success &gt;&gt; &#123;</span></span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"ansible_memtotal_mb"</span>: <span class="number">187</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"changed"</span>: false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">host0 <span class="string">| success &gt;&gt; &#123;</span></span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"ansible_memtotal_mb"</span>: <span class="number">187</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"changed"</span>: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，与前面的输出相比，主机的回复顺序不同，这是因为 ansible 与主机的通信是并行化的！</p><p>顺便说一句，在使用 <code>setup</code> 模块时，可以在 <code>filter=</code> 表达式中使用 <code>*</code>，它与<code>shell</code>相似</p><h3 id="选择主机"><a href="#选择主机" class="headerlink" title="选择主机"></a>选择主机</h3><p>我们看到 <code>all</code> 意味着所有的主机，但 ansible 提供了许多其他的方法来<a href="https://docs.ansible.com/ansible/latest/user_guide/intro_patterns.html" target="_blank" rel="noopener">选择主机</a>:</p><ul><li><code>host0:host1</code>  将在 host0和 host1上运行</li><li><code>host*</code> host开头的主机都会运行 (就像 shell语法一样)</li></ul><p>还有其他涉及主机组的方式，我们将在step-03中看到。</p><h1 id="step-03-主机组"><a href="#step-03-主机组" class="headerlink" title="step-03 主机组"></a>step-03 主机组</h1><p>库存中的主机可以任意分组，例如，您可以有一个 <code>debian</code> 组、一个 <code>web-server</code> 组、一个 <code>production</code> 组等等</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[debian]</span></span><br><span class="line">host0</span><br><span class="line">host1</span><br><span class="line">host2</span><br></pre></td></tr></table></figure><p>这甚至可以用更简短的方式来表达:<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[debian]</span></span><br><span class="line">host<span class="string">[0:2]</span></span><br></pre></td></tr></table></figure></p><p>如果您希望使用子组，只需定义一个 <code>[ groupname: children ]</code> 并在其中添加子组，例如，假设我们有不同发行版的 linux 运行，我们可以这样组织我们的库存:<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[ubuntu]</span></span><br><span class="line">host0</span><br><span class="line"></span><br><span class="line"><span class="string">[debian]</span></span><br><span class="line">host<span class="string">[1:2]</span></span><br><span class="line"></span><br><span class="line"><span class="string">[linux:children]</span></span><br><span class="line">ubuntu</span><br><span class="line">debian</span><br></pre></td></tr></table></figure></p><h3 id="设置变量"><a href="#设置变量" class="headerlink" title="设置变量"></a>设置变量</h3><p>您可以在几个地方为主机分配变量: 库存文件、主机变量文件、组 v变量文件等等</p><p>我通常将大部分变量设置在组变量或主机变量文件中(稍后将详细介绍)。但是，我经常直接在目录文件中使用一些变量，比如<code>ansible_host</code> 可以为主机设置 IP 地址。 默认情况下，Ansible 会在通过 SSH 连接时尝试解析主机的名称。 当在你启动一个主机时，它可能还没有一个确定的 IP 地址，<code>ansible_host</code> 用在这里很方便</p><p>当使用 <code>ansible</code> 或 <code>ansible-playbook</code> 命令时，也可以使用参数 <code>--extra-vars</code> (或<code>-e</code>)来设置变量，作为空格分隔的<code>key=val</code> 列表(对于每个变量的初始化，可以多次使用该方法)。 我们将在下一步讨论<code>ansible-playbook</code></p><p>您可以猜到，<code>ansible_port</code>指定一个 SSH 端口尝试连接<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ubuntu]</span><br><span class="line">host0 ansible_host=<span class="number">192.168</span><span class="number">.0</span><span class="number">.12</span> ansible_port=<span class="number">2222</span></span><br></pre></td></tr></table></figure></p><p>Ansible 将在组和主机变量文件中查找其他变量定义,这些文件在主目录文件所在的目录下的 <code>group_vars</code> 和 <code>host_vars</code> 的目录中搜索</p><p>文件将按名称搜索，例如，使用前面提到的库存文件，<code>host0</code>变量将在这些文件中搜索</p><ul><li><code>group_vars/linux</code></li><li><code>group_vars/ubuntu</code></li><li><code>host_vars/host0</code><br>~~~<br>这些文件是否存在并不重要，但是如果它们存在，ansible 将使用它们</li></ul><p>现在我们已经了解了模块、库存和变量的基本知识，让我们通过剧本来探索 Ansible 的真正力量</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="ansible" scheme="http://yoursite.com/tags/ansible/"/>
    
      <category term="翻译" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>LVS学习</title>
    <link href="http://yoursite.com/2020/05/10/LVS%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/05/10/LVS%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-05-10T03:52:49.000Z</published>
    <updated>2020-05-11T03:58:21.348Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>记录的非常详细,值得学习–&gt; <a href="http://superproxy.github.io/docs/lvs/index.html" target="_blank" rel="noopener">LVS介绍</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
    
      <category term="LVS" scheme="http://yoursite.com/tags/LVS/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>翻译: ansible-tuto（00-01）</title>
    <link href="http://yoursite.com/2020/05/08/%E7%BF%BB%E8%AF%91-ansible-tuto%EF%BC%8800-01%EF%BC%89/"/>
    <id>http://yoursite.com/2020/05/08/%E7%BF%BB%E8%AF%91-ansible-tuto%EF%BC%8800-01%EF%BC%89/</id>
    <published>2020-05-08T13:29:00.000Z</published>
    <updated>2020-05-09T14:34:19.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>官方文档虽好，样样俱全，可就是太碎太细，难以拼接消化，那么就先从跟着一份好的教程先慢慢学起吧</p><p>源地址（包含所有所需文件）–&gt;<a href="https://github.com/leucos/ansible-tuto" target="_blank" rel="noopener">ansible-tuto</a></p><h1 id="step-00-安装"><a href="#step-00-安装" class="headerlink" title="step-00 安装"></a>step-00 安装</h1><p>Vagrant的出现让VirtualBox部署虚拟机变得非常简单容易，为了让本教程更加<code>self-contained</code>，已经提供了所需的Vagrantfile</p><h3 id="安装vagrant"><a href="#安装vagrant" class="headerlink" title="安装vagrant"></a>安装vagrant</h3><p>为了运行Vagrant，需要满足以下条件：</p><ul><li>安装VirtualBox</li><li>安装Ruby</li><li>安装Vagrant（1.1版本以上）<br>以上就是安装Vagrant所需的</li></ul><p>现在就可以根据以下命令去启动你的虚拟机了。请注意，你不需要手动下载任何<code>box</code>，本教程已经提供了一个所需的Vagrantfile，如果还需要其他的，那么还会提供另外一个的<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vagrant up</span></span><br></pre></td></tr></table></figure></p><p>然后可以放松下去喝杯咖啡(注意，如果您使用 vagrant-hostmaster，您需要输入密码，因为sudo 提权需要密码)</p><p>如果有什么地方出了问题，请参考 <a href="https://www.vagrantup.com/intro/getting-started/index.html" target="_blank" rel="noopener">Getting Started Guide</a></p><h3 id="关于NetworkManager的警示"><a href="#关于NetworkManager的警示" class="headerlink" title="关于NetworkManager的警示"></a>关于NetworkManager的警示</h3><p>在某些系统上，<code>NetworkManager</code> 将接管 <code>vboxnet</code> 接口，并把一切都搞砸。 如果是这种情况，应该防止 <code>NetworkManager</code> 尝试自动配置<code>vboxnet</code>接口。 只需编辑 <code>/etc/networkmanager/networkmanager.conf</code> (或者你系统中的 NetworkManager 配置文件)并添加一节[keyfile] :<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unmanaged-devices=<span class="string">mac:</span>MAC_OF_VBOXNET0_IF;<span class="string">mac:</span>MAC_OF_VBOXNET1_IF;...</span><br></pre></td></tr></table></figure></p><p>然后销毁 Vagrant 计算机，重新启动 NetworkManager，然后再试一次。</p><h3 id="为虚拟机添加SSH密钥"><a href="#为虚拟机添加SSH密钥" class="headerlink" title="为虚拟机添加SSH密钥"></a>为虚拟机添加SSH密钥</h3><p>按照该教程，您需要将您的密钥放在虚拟机中<code>root</code>用户文件夹中<code>authorized_keys</code>中，虽然这是不是绝对必要的(ansible可以使用 sudo，密码身份验证等) 但这样事情就简单多了</p><p>ansible非常擅长这个，然而，我现在不会解释发生了什么，相信我<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -i <span class="built_in">step</span><span class="number">-00</span>/hosts <span class="built_in">step</span><span class="number">-00</span>/<span class="built_in">setup</span>.yml</span><br></pre></td></tr></table></figure></p><p>如果出现“超时连接”错误，请检查机器的防火墙设置。</p><p>如果出现以下错误:<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fatal: [<span class="number">192.168</span><span class="number">.33</span><span class="number">.10</span>]: UNREACHABLE! =&gt; &#123;<span class="string">"changed"</span>: <span class="keyword">false</span>, </span><br><span class="line"><span class="string">"msg"</span>: <span class="string">"host key mismatch for 192.168.33.10"</span>, <span class="string">"unreachable"</span>: <span class="keyword">true</span>&#125;</span><br></pre></td></tr></table></figure></p><p>那么你可能已经在你的 <code>~/.ssh/known_hosts</code> 中有了那些 IP 的SSH主机密钥, 您可以使用<code>ssh-keygen-r ip</code>删除它们</p><p>然后，只要在提示访问 ssh 主机密钥(如果请求)时输入 <code>yes</code> 即可。</p><p><strong>注意</strong>: 我们假设您正在本地机器上使用 Ansible v2.5 + 版本。 如果没有，您应该在使用该存储库之前将其升级到 v2.5 + (或在 virtualenv 下运行)。</p><h1 id="step-01-Inventory"><a href="#step-01-Inventory" class="headerlink" title="step-01 Inventory"></a>step-01 Inventory</h1><p>在继续之前，您需要一个库存（invertory)文件，该文件文件的默认位置是 <code>/etc /anable/hosts</code>  然而，你可以通过配置 anable 去将其存储在其他地方，或使用环境变量（ANSIBLE_INVENTORY）指明库存路径，或者使用 <code>ansible</code> 命令中的  <code>-i</code>标志指明库存路径。</p><p>我们在目录中为您创建了一个库存文件，如下所示:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">host0 <span class="attribute">ansible_host</span>=192.168.33.10 <span class="attribute">ansible_user</span>=root</span><br><span class="line">host1 <span class="attribute">ansible_host</span>=192.168.33.11 <span class="attribute">ansible_user</span>=root</span><br><span class="line">host2 <span class="attribute">ansible_host</span>=192.168.33.12 <span class="attribute">ansible_user</span>=root</span><br></pre></td></tr></table></figure></p><p><code>ansible_host</code> 是一个特殊的变量，它代表着主机连接时使用的 IP 地址。 如果您使用 <code>vagrant-hostmaster gem</code> ，那么在这里就没有必要了。 此外，如果您已经使用不同的ip地址设置了自己的虚拟机，则必须更改 ip</p><p><code>Ansible_user</code> 是另一个特殊的变量，它告诉 ansible 在使用 ssh 时以这个用户的身份连接。 默认情况下，ansible 将使用您当前的用户名，或者使用 <code>~/.ansible.cfg</code> 中提供的另一个默认用户名</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>ansible 安装好了，让我们检查一下是否一切正常<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible -m<span class="built_in"> ping </span>all -i step-01/hosts</span><br></pre></td></tr></table></figure></p><p>Ansible 在这里尝试做的只是在每个主机上执行 <code>ping</code> 模块(稍后在模块中进一步介绍)</p><p>输出应该是这样的:<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">host0 <span class="string">| success &gt;&gt; &#123;</span></span><br><span class="line">    <span class="string">"changed"</span>: false,</span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">host1 <span class="string">| success &gt;&gt; &#123;</span></span><br><span class="line">    <span class="string">"changed"</span>: false,</span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">host2 <span class="string">| success &gt;&gt; &#123;</span></span><br><span class="line">    <span class="string">"changed"</span>: false,</span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>以下为安装ssh密钥所用到的 <code>playbook</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">all</span></span><br><span class="line"><span class="attr">become:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">become_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">remote_user:</span> <span class="string">vagrant</span></span><br><span class="line"><span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">tasks:</span></span><br><span class="line"><span class="comment"># This should work too / #2372</span></span><br><span class="line"><span class="comment"># - name: Pushes user key to root's on vagrant boxes</span></span><br><span class="line"><span class="comment">#   action: authorized_key key=$FILE($item) user=root</span></span><br><span class="line"><span class="comment">#   first_available_file:</span></span><br><span class="line"><span class="comment">#     - ~/.ssh/id_dsa.pub</span></span><br><span class="line"><span class="comment">#     - ~/.ssh/id_rsa.pub</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">Wait</span> <span class="string">for</span> <span class="string">ssh</span> <span class="string">to</span> <span class="string">be</span> <span class="string">up</span></span><br><span class="line"><span class="attr">become:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">wait_for:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">22</span></span><br><span class="line"><span class="attr">delay:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">connect_timeout:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">timeout:</span> <span class="number">360</span></span><br><span class="line"><span class="attr">host:</span> <span class="string">"<span class="template-variable">&#123;&#123; ansible_host &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">delegate_to:</span> <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">Installs</span> <span class="string">python</span></span><br><span class="line"><span class="attr">raw:</span> <span class="string">apt-get</span> <span class="string">update</span> <span class="string">&amp;&amp;</span> <span class="string">apt-get</span> <span class="string">install</span> <span class="bullet">-y</span> <span class="string">python</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">Creates</span> <span class="string">destination</span> <span class="string">directory</span></span><br><span class="line"><span class="comment"># Workaround for #2372</span></span><br><span class="line"><span class="attr">file:</span></span><br><span class="line"><span class="attr">state:</span> <span class="string">directory</span></span><br><span class="line"><span class="attr">mode:</span> <span class="number">0700</span></span><br><span class="line"><span class="attr">dest:</span> <span class="string">/root/.ssh/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">Pushes</span> <span class="string">user's</span> <span class="string">rsa</span> <span class="string">key</span> <span class="string">to</span> <span class="string">root's</span> <span class="string">vagrant</span> <span class="string">box</span> <span class="string">(it's</span> <span class="string">ok</span> <span class="string">if</span> <span class="string">this</span> <span class="string">TASK</span> <span class="string">fails)</span></span><br><span class="line"><span class="comment"># action: authorized_key user=root key='$FILE(~/.ssh/id_rsa.pub)'</span></span><br><span class="line"><span class="comment"># Workaround for #2372</span></span><br><span class="line"><span class="attr">copy:</span></span><br><span class="line"><span class="attr">src:</span> <span class="string">~/.ssh/id_rsa.pub</span></span><br><span class="line"><span class="attr">dest:</span> <span class="string">/root/.ssh/authorized_keys</span></span><br><span class="line"><span class="attr">owner:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">mode:</span> <span class="number">0600</span></span><br><span class="line"><span class="attr">register:</span> <span class="string">rsa</span></span><br><span class="line"><span class="attr">ignore_errors:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">Pushes</span> <span class="string">user's</span> <span class="string">dsa</span> <span class="string">key</span> <span class="string">to</span> <span class="string">root's</span> <span class="string">vagrant</span> <span class="string">box</span> <span class="string">(it's</span> <span class="string">NOT</span> <span class="string">ok</span> <span class="string">if</span> <span class="string">both</span> <span class="string">TASKs</span> <span class="string">fail)</span></span><br><span class="line"><span class="comment"># action: authorized_key user=root key='$FILE(~/.ssh/id_dsa.pub)'</span></span><br><span class="line"><span class="comment"># Workaround for #2372</span></span><br><span class="line"><span class="attr">copy:</span></span><br><span class="line"><span class="attr">src:</span> <span class="string">~/.ssh/id_dsa.pub</span></span><br><span class="line"><span class="attr">dest:</span> <span class="string">/root/.ssh/authorized_keys</span></span><br><span class="line"><span class="attr">owner:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">mode:</span> <span class="number">0600</span></span><br><span class="line"><span class="attr">when:</span> <span class="string">rsa</span> <span class="string">is</span> <span class="string">failed</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">Checks</span> <span class="string">if</span> <span class="string">resolver</span> <span class="string">is</span> <span class="string">working</span> <span class="string">properly</span> <span class="string">(issues</span> <span class="string">with</span> <span class="string">some</span> <span class="string">VBox/Host</span> <span class="string">OS</span> <span class="string">combinations)</span></span><br><span class="line"><span class="attr">command:</span> <span class="string">host</span> <span class="bullet">-t</span> <span class="string">A</span> <span class="string">ansible.cc</span></span><br><span class="line"><span class="attr">register:</span> <span class="string">ns</span></span><br><span class="line"><span class="attr">ignore_errors:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">Pushes</span> <span class="string">new</span> <span class="string">resolver</span> <span class="string">configuration</span> <span class="string">if</span> <span class="string">resolver</span> <span class="string">fails</span></span><br><span class="line"><span class="attr">lineinfile:</span></span><br><span class="line"><span class="attr">regexp:</span> <span class="string">"^nameserver "</span></span><br><span class="line"><span class="attr">line:</span> <span class="string">"nameserver 8.8.8.8"</span></span><br><span class="line"><span class="attr">dest:</span> <span class="string">/etc/resolv.conf</span></span><br><span class="line"><span class="attr">when:</span> <span class="string">ns</span> <span class="string">is</span> <span class="string">failed</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">Checks</span> <span class="string">if</span> <span class="string">resolver</span> <span class="string">is</span> <span class="string">working</span> <span class="string">properly</span> <span class="string">with</span> <span class="string">new</span> <span class="string">nameserver</span></span><br><span class="line"><span class="attr">command:</span> <span class="string">host</span> <span class="bullet">-t</span> <span class="string">A</span> <span class="string">ansible.cc</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">Final</span> <span class="string">greeting</span></span><br><span class="line"><span class="attr">pause:</span></span><br><span class="line"><span class="attr">seconds:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">echo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prompt:</span> <span class="string">"Don't worry about all the red above; if you made it here, your Vagrant VMs are probably fine !"</span></span><br></pre></td></tr></table></figure></p><ul><li>首先，playbook的文件格式为 <code>yaml</code></li></ul><p>为了方便将其分开来说明<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- hosts:</span> <span class="string">all</span></span><br><span class="line"><span class="attr">become:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">become_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">remote_user:</span> <span class="string">vagrant</span></span><br><span class="line"><span class="attr">gather_facts:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><ul><li>每一个剧本都应指明相应的host也就是inventory（库存里的主机），默认的hosts文件在 <code>/etc/ansible/hosts</code> ,当然也可以将 <code>hosts</code> 文件存放在自己指定的位置，最后在执行 <code>ansible-play</code>时加上 <code>-i</code>参数指明路径，而 <code>all</code> 就代表着所有主机 </li><li>这里的 <code>become</code> 代表着提权，默认方式为 <code>sudo</code>，也可以指定其他方式，如 <code>become_method: su</code></li><li><code>become_user</code> 就好理解了，为提权后的用户</li><li>要用到提权难免会输入密码，此时运行该剧本时就应加上 <code>-k</code> 或 <code>--ask-become-pass</code></li><li><code>remote_user</code> 为远程登录用户</li><li><code>gather_facts</code> 用于收集系统信息，不需要时关闭可提高运行速度</li></ul><p>接下来就是<code>tasks</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">Creates</span> <span class="string">destination</span> <span class="string">directory</span></span><br><span class="line"><span class="comment"># Workaround for #2372</span></span><br><span class="line"><span class="attr">file:</span></span><br><span class="line"><span class="attr">state:</span> <span class="string">directory</span></span><br><span class="line"><span class="attr">mode:</span> <span class="number">0700</span></span><br><span class="line"><span class="attr">dest:</span> <span class="string">/root/.ssh/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">Pushes</span> <span class="string">user's</span> <span class="string">rsa</span> <span class="string">key</span> <span class="string">to</span> <span class="string">root's</span> <span class="string">vagrant</span> <span class="string">box</span> <span class="string">(it's</span> <span class="string">ok</span> <span class="string">if</span> <span class="string">this</span> <span class="string">TASK</span> <span class="string">fails)</span></span><br><span class="line"><span class="comment"># action: authorized_key user=root key='$FILE(~/.ssh/id_rsa.pub)'</span></span><br><span class="line"><span class="comment"># Workaround for #2372</span></span><br><span class="line"><span class="attr">copy:</span></span><br><span class="line"><span class="attr">src:</span> <span class="string">~/.ssh/id_rsa.pub</span></span><br><span class="line"><span class="attr">dest:</span> <span class="string">/root/.ssh/authorized_keys</span></span><br><span class="line"><span class="attr">owner:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">mode:</span> <span class="number">0600</span></span><br><span class="line"><span class="attr">register:</span> <span class="string">rsa</span></span><br><span class="line"><span class="attr">ignore_errors:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><ul><li>根据 <code>yaml</code> 语法，<code>-</code>表示的是一个数组，后面的 <code>name</code> 可有可无，为了有更好的辨明度，最好加上</li><li>后面最先接的是一个模块名称，再后面就是进行的操作，之后的教程会说到</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;官方文档虽好，样样俱全，可就是太碎太细，难以拼接消化，那么就先从跟着一份好的教程先慢慢学起吧&lt;/p&gt;
&lt;p&gt;源地址（包含所有所需文件）–&amp;g
      
    
    </summary>
    
    
    
      <category term="ansible" scheme="http://yoursite.com/tags/ansible/"/>
    
      <category term="翻译" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>vagrant学习</title>
    <link href="http://yoursite.com/2020/05/06/vagrant%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/05/06/vagrant%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-05-06T04:36:14.000Z</published>
    <updated>2020-05-06T14:02:27.285Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h1 id="什么是vagrant"><a href="#什么是vagrant" class="headerlink" title="什么是vagrant"></a>什么是vagrant</h1><blockquote><p>Vagrant is a tool for building and managing virtual machine environments in a single workflow. With an easy-to-use workflow and focus on automation, Vagrant lowers development environment setup time, increases production parity, and makes the “works on my machine” excuse a relic of the past.</p><ul><li>简而言之，即是一次打包，随处使用</li></ul></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>vagrant 支持多种虚拟化软件</p><ul><li>VirualBox</li><li>Vmware(付费)</li><li>KVM</li><li>Hyper-v</li></ul><p>这里用到的是 virtualbox（默认支持），注意需先安装 virtualbox，再安装 vagrant，否则会出现找不到 virualbox 的错误，需重新安装</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo pacman -S virualbox</span></span><br></pre></td></tr></table></figure><ul><li>安装后还需加载相应内核模块<code>modprobe -a vboxdrv</code></li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo pacman -S vagrant</span></span><br></pre></td></tr></table></figure><h1 id="什么是box"><a href="#什么是box" class="headerlink" title="什么是box"></a>什么是box</h1><p>box 是vagrant环境的一种打包格式，在所有vagrant支持的操作系统上是通用的，而后面所有进行的操作都与box息息相关（类似于docker中的镜像）</p><p>这是box商店 —&gt; <a href="https://app.vagrantup.com/boxes/search" target="_blank" rel="noopener">door</a></p><ul><li>在这里可以找到各种想要发行版或服务</li></ul><p>每个box以 <code>作者名/box名</code>加以区分</p><p>添加一个box<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">vagrant</span> <span class="keyword">box </span><span class="keyword">add </span>ubuntu/trusty64</span><br></pre></td></tr></table></figure></p><ul><li><p>可以是本地文件，也可以是一个下载地址</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vagrant <span class="type">box</span> <span class="keyword">add</span> \</span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/ubuntu-cloud-images/bionic/<span class="keyword">current</span>/bionic-<span class="keyword">server</span>-cloudimg-amd64-vagrant.box \</span><br><span class="line"><span class="comment">--name ubuntu/bionic</span></span><br></pre></td></tr></table></figure></li><li><p>就像这样</p></li></ul><p>查看刚刚添加的box<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box <span class="built_in">list</span></span><br></pre></td></tr></table></figure></p><p>删除<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant <span class="built_in">box</span> <span class="built_in">remove</span> name</span><br></pre></td></tr></table></figure></p><h1 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h1><p>了解了box，就可以正式开始了</p><p>先新建一个文件夹，作为本次的大本营,初始化<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mkdir</span> <span class="keyword">my</span>-vagrant</span><br><span class="line">cd <span class="keyword">my</span>-vagrant</span><br><span class="line"></span><br><span class="line">vagrant init ubuntu/trusty64</span><br></pre></td></tr></table></figure></p><ul><li>init 指定一个box，也可以是一个url</li></ul><p>这样在当前目录就生成了一个Vagrantfile，作为我们的初始配置文件<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># All Vagrant configuration is done below. The "2" in Vagrant.configure</span></span><br><span class="line"><span class="comment"># configures the configuration version (we support older styles for</span></span><br><span class="line"><span class="comment"># backwards compatibility). Please don't change it unless you know what</span></span><br><span class="line"><span class="comment"># you're doing.</span></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</span><br><span class="line">  <span class="comment"># The most common configuration options are documented and commented below.</span></span><br><span class="line">  <span class="comment"># For a complete reference, please see the online documentation at</span></span><br><span class="line">  <span class="comment"># https://docs.vagrantup.com.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Every Vagrant development environment requires a box. You can search for</span></span><br><span class="line">  <span class="comment"># boxes at https://vagrantcloud.com/search.</span></span><br><span class="line">  config.vm.box = <span class="string">"ubuntu/trusty64"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Disable automatic box update checking. If you disable this, then</span></span><br><span class="line">  <span class="comment"># boxes will only be checked for updates when the user runs</span></span><br><span class="line">  <span class="comment"># `vagrant box outdated`. This is not recommended.</span></span><br><span class="line">  <span class="comment"># config.vm.box_check_update = false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create a forwarded port mapping which allows access to a specific port</span></span><br><span class="line">  <span class="comment"># within the machine from a port on the host machine. In the example below,</span></span><br><span class="line">  <span class="comment"># accessing "localhost:8080" will access port 80 on the guest machine.</span></span><br><span class="line">  <span class="comment"># <span class="doctag">NOTE:</span> This will enable public access to the opened port</span></span><br><span class="line">  <span class="comment"># config.vm.network "forwarded_port", guest: 80, host: 8080</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create a forwarded port mapping which allows access to a specific port</span></span><br><span class="line">  <span class="comment"># within the machine from a port on the host machine and only allow access</span></span><br><span class="line">  <span class="comment"># via 127.0.0.1 to disable public access</span></span><br><span class="line">  <span class="comment"># config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create a private network, which allows host-only access to the machine</span></span><br><span class="line">  <span class="comment"># using a specific IP.</span></span><br><span class="line">  <span class="comment"># config.vm.network "private_network", ip: "192.168.33.10"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create a public network, which generally matched to bridged network.</span></span><br><span class="line">  <span class="comment"># Bridged networks make the machine appear as another physical device on</span></span><br><span class="line">  <span class="comment"># your network.</span></span><br><span class="line">  <span class="comment"># config.vm.network "public_network"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Share an additional folder to the guest VM. The first argument is</span></span><br><span class="line">  <span class="comment"># the path on the host to the actual folder. The second argument is</span></span><br><span class="line">  <span class="comment"># the path on the guest to mount the folder. And the optional third</span></span><br><span class="line">  <span class="comment"># argument is a set of non-required options.</span></span><br><span class="line">  <span class="comment"># config.vm.synced_folder "../data", "/vagrant_data"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Provider-specific configuration so you can fine-tune various</span></span><br><span class="line">  <span class="comment"># backing providers for Vagrant. These expose provider-specific options.</span></span><br><span class="line">  <span class="comment"># Example for VirtualBox:</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># config.vm.provider "virtualbox" do |vb|</span></span><br><span class="line">  <span class="comment">#   # Display the VirtualBox GUI when booting the machine</span></span><br><span class="line">  <span class="comment">#   vb.gui = true</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#   # Customize the amount of memory on the VM:</span></span><br><span class="line">  <span class="comment">#   vb.memory = "1024"</span></span><br><span class="line">  <span class="comment"># end</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># View the documentation for the provider you are using for more</span></span><br><span class="line">  <span class="comment"># information on available options.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Enable provisioning with a shell script. Additional provisioners such as</span></span><br><span class="line">  <span class="comment"># Ansible, Chef, Docker, Puppet and Salt are also available. Please see the</span></span><br><span class="line">  <span class="comment"># documentation for more information about their specific syntax and use.</span></span><br><span class="line">  <span class="comment"># config.vm.provision "shell", inline: &lt;&lt;-SHELL</span></span><br><span class="line">  <span class="comment">#   apt-get update</span></span><br><span class="line">  <span class="comment">#   apt-get install -y apache2</span></span><br><span class="line">  <span class="comment"># SHELL</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><ul><li>配置文件的语法格式为ruby</li></ul><p>相关配置块共有5种：</p><ul><li>config.vm 与虚拟机相关配置</li><li>config.ssh 与ssh相关配置</li><li>config.vagrant 与vagrant自身相关配置</li><li>config.winrm 与Windows远程管理相关配置</li><li>config.winssh 与Windows平台上ssh相关配置</li></ul><p>最常用的还是config.vm</p><table><thead><tr><th style="text-align:center">config.vm.box</th><th style="text-align:center">指定一个box（初始化时就已经自动填好）</th></tr></thead><tbody><tr><td style="text-align:center">config.vm.box_version</td><td style="text-align:center">指定一个box的版本</td></tr><tr><td style="text-align:center">comfig.vm.define</td><td style="text-align:center">为这个虚拟机取个名（默认为default）</td></tr></tbody></table><p><a href="https://www.vagrantup.com/docs/vagrantfile/machine_settings.html" target="_blank" rel="noopener">更多设置</a></p><p>开始启动<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vagrant up</span></span><br></pre></td></tr></table></figure></p><ul><li>这样过一会虚拟机就会启动完成了</li></ul><p>关机、重启<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vagrant</span> <span class="string">halt</span></span><br><span class="line"></span><br><span class="line"><span class="attr">vagrant</span> <span class="string">reload</span></span><br></pre></td></tr></table></figure></p><h1 id="ssh管理"><a href="#ssh管理" class="headerlink" title="ssh管理"></a>ssh管理</h1><p>创建完成后已经自动设置好了ssh，查看配置<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vagrant ssh-config</span><br><span class="line"></span><br><span class="line">&gt;</span><br><span class="line">Host default</span><br><span class="line">HostName 127.0.0.1</span><br><span class="line">User vagrant</span><br><span class="line">Port 2222</span><br><span class="line">UserKnownHostsFile /dev/<span class="literal">null</span></span><br><span class="line">StrictHostKeyChecking <span class="literal">no</span></span><br><span class="line">PasswordAuthentication <span class="literal">no</span></span><br><span class="line">IdentityFile /home/test/my-vagrant/.vagrant/machines/default/virtualbox/private_key</span><br><span class="line">IdentitiesOnly <span class="literal">yes</span></span><br><span class="line">LogLevel FATAL</span><br></pre></td></tr></table></figure></p><ul><li>可以得到几个重要信息：ip、端口、用户名、密钥地址</li></ul><p>连接虚拟机<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vagrant ssh </span><br><span class="line"></span><br><span class="line"># 等同于 ssh <span class="symbol">vagrant@</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -p <span class="number">2222</span> -i ~/my—vagrant/.vagrant/machines/<span class="keyword">default</span>/virtualbox/private_key</span><br></pre></td></tr></table></figure></p><ul><li>若有多个虚拟机，则在ssh 后接名字即可</li></ul><h1 id="Provisioning-预配置"><a href="#Provisioning-预配置" class="headerlink" title="Provisioning 预配置"></a>Provisioning 预配置</h1><p>要使用Preovision 须在Vagrantfile里配置，这样在在虚拟机开启时会自动运行这些预先配置</p><p>配置语法其一为内联<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config<span class="selector-class">.vm</span><span class="selector-class">.provision</span> <span class="string">"shell"</span>, inline: <span class="string">"echo hello"</span></span><br></pre></td></tr></table></figure></p><ul><li><code>config.vm.provision</code> 后接的是预配置的提供者类型 </li></ul><p>其二以配置块的方式出现<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">config.vm.provision <span class="string">"shell"</span> <span class="built_in">do</span> |<span class="type">s</span>|<span class="type"></span></span><br><span class="line"><span class="type">  s</span>.inline = <span class="string">"echo hello"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">或先为其起个名字</span><br><span class="line"> config.vm.provision <span class="string">"ansibbbble"</span>,type: <span class="string">"ansible"</span>  <span class="built_in">do</span> |<span class="type">ansible</span>|<span class="type"></span></span><br><span class="line"><span class="type">  ansible</span>.playbook = <span class="string">"./playbook.yml"</span></span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><ul><li>后者的”ansibbbble” 则为预配置的一个名字，这样的话输出会更加直白</li></ul><p>若是在启动后还想再次运行预配置<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vagrant provision</span></span><br></pre></td></tr></table></figure></p><h1 id="同步文件"><a href="#同步文件" class="headerlink" title="同步文件"></a>同步文件</h1><p>在虚拟机开启时，会自动将当前目录与虚拟机中的 <code>/vagrant</code> 文件夹进行同步，实则自动将当前目录挂载了</p><hr><p><a href="https://www.vagrantup.com/docs/" target="_blank" rel="noopener">更多文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="vagrant" scheme="http://yoursite.com/tags/vagrant/"/>
    
  </entry>
  
  <entry>
    <title>多进程shell的使用</title>
    <link href="http://yoursite.com/2020/05/01/%E5%A4%9A%E8%BF%9B%E7%A8%8Bshell%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/05/01/%E5%A4%9A%E8%BF%9B%E7%A8%8Bshell%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-05-01T10:55:28.000Z</published>
    <updated>2020-05-01T12:26:20.008Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>在正常情况下，shell执行一个命令都是fork一个子进程再exec相应命令</p><p>shell也可以实现多进程实现并发</p><p>将要用到多进程的语句用<code>{  }</code>括起来，在最后加上<code>&amp;</code>，就会在运行时运行多个子shell实现多进程</p><p>上面就类似于c语言中的<code>fork()</code>,那不得不说与之搭配的<code>wait（）</code>，shell里对应的是<code>wait</code></p><ul><li><code>wait</code> 默认是等待子进程全部退出，后接pid则为等待指定进程退出</li></ul><p>来一个批量ping的脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> &#123;1..254&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    sleep 3</span><br><span class="line">    ping 192.168.1.<span class="variable">$ip</span> -c 3 &gt; /dev/null</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> [ $? -eq 0 ];</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        hostname=`nslookup 192.168.1.<span class="variable">$ip</span> | awk <span class="string">'&#123;print $4&#125;'</span>`</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$hostname</span> != <span class="string">"find"</span> ]; <span class="comment">#当没找到hostname时为“find”</span></span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"192.168.1.<span class="variable">$ip</span> <span class="variable">$hostname</span> is up"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"192.168.1.<span class="variable">$ip</span> is up"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;&amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">wait</span></span><br></pre></td></tr></table></figure></p><ul><li>使用<code>ps aux | grep ping | grep -v grep | wc -l</code>来验证，结果为254，也就是实实在在有254个进程在并发实行</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>manjaro解决xbox手柄蓝牙问题</title>
    <link href="http://yoursite.com/2020/05/01/manjaro%E4%B8%8B%E8%A7%A3%E5%86%B3%E8%93%9D%E7%89%99%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/05/01/manjaro%E4%B8%8B%E8%A7%A3%E5%86%B3%E8%93%9D%E7%89%99%E9%97%AE%E9%A2%98/</id>
    <published>2020-05-01T02:58:05.000Z</published>
    <updated>2020-05-01T03:52:07.558Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>安装依赖<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">sudo</span> pacman -S dkms linux-headers <span class="keyword">bluez </span><span class="keyword">bluez-utils</span></span><br></pre></td></tr></table></figure></p><p>查看内核是否加载了蓝牙模块<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep btusb</span><br><span class="line"></span><br><span class="line">&gt;</span><br><span class="line">btusb                  <span class="number">65536</span>  <span class="number">0</span></span><br><span class="line">btrtl                  <span class="number">24576</span>  <span class="number">1</span> btusb</span><br><span class="line">btbcm                  <span class="number">16384</span>  <span class="number">1</span> btusb</span><br><span class="line">btintel                <span class="number">28672</span>  <span class="number">1</span> btusb</span><br><span class="line">bluetooth             <span class="number">671744</span>  <span class="number">39</span> btrtl,btintel,btbcm,bnep,btusb,rfcomm</span><br></pre></td></tr></table></figure></p><p>安装驱动<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/tmp</span></span><br><span class="line">git clone https:<span class="string">//github.com/atar-axis/xpadneo.git</span></span><br><span class="line"><span class="keyword">cd</span> xpadneo </span><br><span class="line">sudo <span class="string">.install.sh</span></span><br></pre></td></tr></table></figure></p><p>此时连接蓝牙<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bluetoothctl</span><br><span class="line"></span><br><span class="line">&gt;scan</span><br><span class="line"><span class="comment"># 此时会出现新扫描出来的设备 </span></span><br><span class="line">[NEW] Device C8:3F:2A:7A:FB:4A Xbox<span class="built_in"> Wireless </span>Controller</span><br><span class="line"></span><br><span class="line">&gt;pair mac地址</span><br><span class="line">&gt;trust mac地址</span><br><span class="line">&gt;connect mac地址</span><br></pre></td></tr></table></figure></p><ul><li>当手柄震动且西瓜灯常亮就应经连接成功了</li></ul><hr><p>关于蓝牙耳机连接上了，但播放没有声音，重启一下服务可以解决<code>systemctl restart bluetooth</code></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="蓝牙" scheme="http://yoursite.com/tags/%E8%93%9D%E7%89%99/"/>
    
  </entry>
  
  <entry>
    <title>周年事记</title>
    <link href="http://yoursite.com/2020/04/25/%E5%91%A8%E5%B9%B4%E4%BA%8B%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/04/25/%E5%91%A8%E5%B9%B4%E4%BA%8B%E8%AE%B0/</id>
    <published>2020-04-25T03:56:14.000Z</published>
    <updated>2020-05-06T14:04:13.014Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><blockquote><p>本来觉得摆脱标签活出自己就已经是尽力了,可渐渐却在追求自我的路上不断给自己加上标签,真像一头猪啊</p></blockquote><p>始终忘不了之前看过的一部电影,镜头先是一个喧闹的酒吧,人们在快活地跳着舞,随着是一个黑白的、无声音的、人们在地上诡异地扭动的上帝视角长镜头。那几分钟，仿佛是一个自我的觉醒</p><blockquote><p>一个无限遥远的目标不是目标,而是一个欺骗<br>  一个无限遥远的理由也不是理由,而是一个借口</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>为多个代理设置反向代理</title>
    <link href="http://yoursite.com/2020/04/19/%E4%B8%BA%E5%A4%9A%E4%B8%AA%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2020/04/19/%E4%B8%BA%E5%A4%9A%E4%B8%AA%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</id>
    <published>2020-04-19T14:06:57.000Z</published>
    <updated>2020-04-26T04:36:11.789Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h1 id="为web设置反向代理"><a href="#为web设置反向代理" class="headerlink" title="为web设置反向代理"></a>为web设置反向代理</h1><p>首先在http下加上upstream字段<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">upstream webserver &#123;</span><br><span class="line">   <span class="built_in"> server </span>127.0.0.1:80;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再在<code>server</code>加上location<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">location</span> <span class="title">/ &#123;</span></span><br><span class="line"><span class="title">    proxy_pass</span> http://webserver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>至此简单反向代理完成<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span> mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">upstream</span> web &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:80</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://web;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><p>为的就是实现优化资源利用率,增大吞吐量,减少访问延迟及一定的容错策略</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li>轮询(round-robin) – 对应用程序服务器的请求以轮询方式分发，</li><li>最少的连接(least-connected) – 下一个请求分配给连接最少的服务器</li><li>ip-hash – 根据ip来决定由哪一台服务器</li></ul><p>就上一节来说,当<code>upstram</code>里出现多个<code>server</code>时,默认就为轮询<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在这里加上关键字`weight`可为轮询加上权重</span></span><br><span class="line">    upstream web &#123;</span><br><span class="line">       <span class="built_in"> server </span>127.0.0.1:80 weight = 1;</span><br><span class="line">       <span class="built_in"> server </span>127.0.0.1:81 weight = 10;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><ul><li>意思为11个连接中10个分给81端口,剩下1个给80</li></ul><p>设置<code>least-connected</code>加上<code>minimum_conn</code>即可</p><p>设置<code>ip-hash</code>可实现会话的持久性,以避免重复建立不必要的连接,加上<code>ip_hash</code>即可</p><p><code>upstream</code>的一些高级字段:</p><ul><li>down：表示单前的server暂时不参与负载.</li><li>max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误.</li><li>fail_timeout : max_fails次失败后，暂停的时间。</li><li>backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。</li></ul><p><a href="http://nginx.org/en/docs/http/load_balancing.html" target="_blank" rel="noopener">http://nginx.org/en/docs/http/load_balancing.html</a></p><h1 id="为多个代理设置反向代理"><a href="#为多个代理设置反向代理" class="headerlink" title="为多个代理设置反向代理"></a>为多个代理设置反向代理</h1><blockquote><p>为什么需要这个?总有些代理不够稳定,这样就需要频繁更改应用的代理端口,如果能设置一个反向代理代理它们,就能以一个固定端口访问了</p></blockquote><p>这里用到的是<code>stream</code>模块而不是<code>http</code><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    upstream proxys &#123;</span><br><span class="line">       <span class="built_in"> server </span>127.0.0.1:1234 <span class="attribute">max_fails</span>=2 <span class="attribute">fail_timeout</span>=1s;</span><br><span class="line">       <span class="built_in"> server </span>127.0.0.1:12345 backup;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> server </span>&#123;</span><br><span class="line">        listen 127.0.0.1:12666;</span><br><span class="line">        # 不能出现server_name字段和其余默认http相关字段</span><br><span class="line"></span><br><span class="line">        proxy_pass proxys;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>这样就ok了,默认优先提供1234端口服务,除非服务不可用超时</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="反向代理" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>docker-compose学习</title>
    <link href="http://yoursite.com/2020/04/12/docker-compose%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/04/12/docker-compose%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-04-12T13:13:55.000Z</published>
    <updated>2020-05-01T12:29:07.032Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h1 id="构建自己的镜像"><a href="#构建自己的镜像" class="headerlink" title="构建自己的镜像"></a>构建自己的镜像</h1><p>创建自己的docker镜像可以有两种方式</p><ol><li>在已有镜像上做修改再commit</li><li>利用dockerfile构建</li><li>手动导入导出（过时）</li></ol><h4 id="docker-commit"><a href="#docker-commit" class="headerlink" title="docker commit"></a>docker commit</h4><p>默认容器启动时是在一个可以修改的最顶层镜像层上保存着所有修改的内容，然后重启失效</p><p>可用<code>docker commit -a &quot;作者&quot; -m &quot;描述信息&quot; id 新的镜像名:tag</code> 来将修改的内容保存形成一个新的镜像</p><p>用<code>docker histiry id</code> 查看历史记录</p><p>用<code>docker diff id</code> 查看文件变动</p><p>每次调用<code>commit</code>都会使镜像新增一个新的存储层,哪怕是添加文件后又删除,而每一次操作都是黑箱式操作,不利于维护,所以构建镜像应该用<code>dockerfile</code>来构建</p><h4 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h4><p>dockerfile是一个文本文件,包含了构建docker镜像的指令,每一个指令都会形成一个新的镜像层</p><p><strong>FROM</strong> 用于指定基础镜像</p><ul><li>基础镜像可以是一个服务(mysql)也可以是一个操作系统(alpine 一个非常轻量的linux发行版,仅占5MB左右)</li><li>也可以不指定基础镜像,直接从二进制文件开始作为第一层镜像,需用到<code>FROM scratch</code>，代表的是一个空镜像，然后执行命令</li></ul><p><strong>COPY</strong> 复制文件</p><ul><li>格式为 <code>COPY 源地址 目的地址</code> ，复制完成后会形成一层新的镜像层，相对于一条指令形成一层镜像层</li><li>复制时默认保留文件的元数据，即权限、时间等，也可以手动指定用户和用户组 <code>COPY --chown=user：group 123 123</code></li></ul><p><strong>RUN</strong> 执行命令<br>一共有两种执行格式：</p><ul><li>shell： <code>RUN echo $SHELL</code> 后接一条shell语句或用 <code>&amp;&amp;</code> 拼接的多条语句（这是因为多条指令会多形成新的层，镜像层有最大层数限制且不利于维护，不美观）</li><li>exec： <code>RUN [&quot;echo&quot;,&quot;$SHELL&quot;]</code> 前面为可执行文件，后面为可选的参数</li></ul><p><strong>CMD</strong> 容器启动命令</p><ul><li>格式与<code>RUN</code> 类似</li><li>shell格式的命令会被解析为<code>sh -c command</code>格式，实际为`RUN [“sh”,”-c”,”command”],所以在命令中可用环境变量</li><li>在运行容器时可手动覆盖<code>CMD</code>，如<code>docker run -it test /bin/bsah</code>，镜像名后接的命令即是覆盖后的命令</li><li>需要注意一点，容器提供服务的只是一个进程，容器的1号进程为自己指定的程序，所以当进程退出了容器随即消亡，容器没有后台服务的概念，如果将<code>CMD</code>设置为一个shell命令，那么就是执行完命令容器就退出了，要让容器持续提供服务，<code>CMD</code>应为一个长久的前台命令，如<code>CMD [&quot;nginx&quot;,&quot;-g&quot;,&quot;daemon off&quot;]</code></li></ul><p><strong>ENTRYPOINT</strong> 入口点</p><ul><li>格式与<code>CMD</code>相似，同时也是启动命令</li><li>当<code>CMD</code>和<code>ENTRYPOINT</code>同时出现时（上面说道，），<code>CMD</code>的意义就发生了变化，不再是容器启动命令，而被当作<code>ENTRYPOINT</code>所指定的命令的参数</li><li>和<code>CMD</code>一样可以被覆盖，<code>docker run</code>使用<code>--entrypoint command</code> </li><li>[有点绕&gt;&gt;&gt;&gt;例子]（<a href="https://vuepress.mirror.docker-practice.com/image/dockerfile/entrypoint.html）" target="_blank" rel="noopener">https://vuepress.mirror.docker-practice.com/image/dockerfile/entrypoint.html）</a></li></ul><p><strong>ENV</strong> 环境变量</p><ul><li><code>ENV key value</code> 或者 <code>ENV key=value</code></li><li>设置完的变量在其他指令里也可以用</li><li>同样也可以被覆盖，<code>docker run</code> + <code>-e key=value</code></li></ul><p><strong>VOLUME</strong> 定义匿名卷</p><ul><li>格式与<code>CMD</code>类似，<code>VOLUME /PATH</code>或<code>VOLUME [&quot;PATH&quot;,&quot;PATH2&quot;]</code> </li><li>这里的匿名卷可以将数据库的数据存储下来不至于丢失，但为了方便管理还是手动创建命名良好的卷再挂载，<code>docker run</code> + <code>-v volumename：/path</code></li></ul><p><strong>EXPOSE</strong> 声明端口</p><ul><li>格式类似与上面</li><li>该指令只是声明端口，不会实际开启这个端口提供服务，为<code>docker run</code>命令中指定了<code>-P</code> 的容器端口，然后映射为随机主机端口</li></ul><p><strong>WORKDIR</strong> 指明工作目录</p><ul><li>格式 <code>WORKDIR /PATH</code>，若目录会存在会自动创建</li><li>每一层镜像层都是一个独立环境，上一个切换目录的指令不会影响到下条指令，所以需要指定工作目录</li></ul><p><strong>USER</strong> 指定当前用户</p><ul><li>同上</li></ul><h1 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h1><p><del>咕咕咕,待更新</del></p><h3 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h3><p><a href="https://www.runoob.com/w3cnote/yaml-intro.html" target="_blank" rel="noopener">yaml入门</a></p><blockquote><p>基本语法</p><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进不允许使用tab，只允许空格</li><li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li><li>‘#’表示注释</li></ul></blockquote><p>YAML 支持以下几种数据类型：</p><ul><li>对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）</li><li>数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）</li><li>标量（scalars）：单个的、不可再分的值</li></ul><p>&amp; 用来建立锚点（defaults），&lt;&lt; 表示合并到当前数据，* 用来引用锚点<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">defaults</span>: &amp;defaults</span><br><span class="line">  <span class="attribute">adapter</span>:  postgres</span><br><span class="line">  <span class="attribute">host</span>:     localhost</span><br><span class="line"></span><br><span class="line"><span class="attribute">development:</span></span><br><span class="line">  database: myapp_development</span><br><span class="line">  &lt;&lt;: *defaults</span><br><span class="line"></span><br><span class="line"><span class="attribute">test:</span></span><br><span class="line">  database: myapp_test</span><br><span class="line">  &lt;&lt;: *defaults</span><br></pre></td></tr></table></figure></p><ul><li><code>&lt;&lt;: *defaults</code> == <code>adapter: postgres \n host: localhost</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="容器" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>使用ufw配置防火墙</title>
    <link href="http://yoursite.com/2020/04/06/%E4%BD%BF%E7%94%A8ufw%E9%85%8D%E7%BD%AE%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    <id>http://yoursite.com/2020/04/06/%E4%BD%BF%E7%94%A8ufw%E9%85%8D%E7%BD%AE%E9%98%B2%E7%81%AB%E5%A2%99/</id>
    <published>2020-04-06T12:33:04.000Z</published>
    <updated>2020-04-25T02:22:04.664Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><blockquote><p>iptables 是一个命令行实用工具，用于配置 Netfilter 项目中实现的 Linux 内核防火墙。 术语 iptables 也通常用来指这种内核级别的防火墙。 它可以直接用 iptables 进行配置，或者使用许多控制台和图形前端之一进行配置。</p></blockquote><p>这次要讲到的ufw是 Uncomplicated Firewall 的缩写，是一个管理 netfilter 防火墙的程序。 它提供了一个命令行界面，目的是简单易用</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>为命令行模式<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pacman -S ufw</span></span><br></pre></td></tr></table></figure></p><p>也有图形的<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pacman -S gufw</span></span><br></pre></td></tr></table></figure></p><h1 id="状态查询"><a href="#状态查询" class="headerlink" title="状态查询"></a>状态查询</h1><p>启用它<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw <span class="built_in">enable</span></span><br></pre></td></tr></table></figure></p><ul><li>这样就会开机启动了</li><li>注意不能和<code>iptables.service</code>同时启用</li></ul><p>关闭    <code>ufw disable</code></p><p>查看状态    <code>ufw status</code></p><p>查看状态，规则以数字标号    <code>ufw status numbered</code></p><ul><li>后面删除规则就会用到规则号码</li></ul><h1 id="规则语法"><a href="#规则语法" class="headerlink" title="规则语法"></a>规则语法</h1><h3 id="具体的地址端口"><a href="#具体的地址端口" class="headerlink" title="具体的地址端口"></a>具体的地址端口</h3><p>允许任意来源任意协议放开53端口  <code>ufw allow 53</code></p><ul><li>会增加两条规则，分别对应v4、v6</li><li>在端口号后可指定协议，如<code>53/tcp</code></li></ul><p>而对应完整版应为<code>来源/目的+端口</code>    </p><ul><li><code>ufw allow proto tcp from any to any port 53</code></li><li><code>ufw allow proto udp from any to any port 53</code></li></ul><p>前面的语句默认是放开、拒绝双向连接，也可以指定单向</p><ul><li><code>ufw allow in 53</code></li><li><code>ufw allow out 53</code></li></ul><p>可以同时指定多个端口    <code>ufw allow proto tcp from any to any port 80,443,8080:8090</code></p><ul><li>不能单独删除一个端口</li><li>端口间不能接空格</li></ul><p>any指带的即是网络号，也可以是设备</p><ul><li>如<code>ufw deny proto tcp from 10.0.0.0/8 to 192.168.0.1 port 53</code></li><li>拒绝来自10.0.0.0/8域的tcp协议指向192.168.0.1端口53的数据进入本机</li><li><code>ufw route allow in on eth1 out on eth2</code></li><li>允许经eth1进入，eth2发出的数据经本机路由</li></ul><p>删除规则    <code>ufw delete allow 53</code></p><ul><li>或者通过规则序号删除  <code>ufw delete num</code></li></ul><h3 id="app-profiles"><a href="#app-profiles" class="headerlink" title="app profiles"></a>app profiles</h3><p>默认自带app配置在<code>/etc/ufw/applications.d/</code></p><ul><li>或通过<code>ufw app list</code>查看名字，再<code>ufw app info name</code><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ufw app <span class="builtin-name">info</span> WWW</span><br><span class="line"></span><br><span class="line">&gt;</span><br><span class="line">Profile: WWW</span><br><span class="line">Title: Web Server</span><br><span class="line">Description: Web server</span><br><span class="line"></span><br><span class="line">Port:</span><br><span class="line">80/tcp</span><br></pre></td></tr></table></figure></li></ul><p>添加删除规则直接用app名字来进行</p><ul><li>添加  <code>ufw allow WWW</code></li><li>删除  <code>ufw delete allow WWW</code></li></ul><p>添加一个新的app配置<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ufw/applications.d/ufw-kde-connect</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键字全部加上缺一不可</span></span><br><span class="line">[kde-connect]   <span class="comment">#app配置名</span></span><br><span class="line">title=kde-connect</span><br><span class="line">description=kde-connect</span><br><span class="line">ports=1716  <span class="comment">#规则</span></span><br></pre></td></tr></table></figure></p><ul><li>更新使其生效  <code>ufw app update kde-connect</code></li><li>这样通过app名管理更加直观</li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>在测试时发现通过docker暴露出来的端口不受ufw控制</p><ul><li><a href="https://blog.csdn.net/sinat_33384251/article/details/94409846" target="_blank" rel="noopener">解决方案</a></li></ul><hr><p>ref:<br><a href="https://wiki.manjaro.org/index.php?title=Firewalls" target="_blank" rel="noopener">https://wiki.manjaro.org/index.php?title=Firewalls</a><br><a href="https://wiki.ubuntu.org.cn/Ufw%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97" target="_blank" rel="noopener">https://wiki.ubuntu.org.cn/Ufw%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="ufw" scheme="http://yoursite.com/tags/ufw/"/>
    
      <category term="iptables" scheme="http://yoursite.com/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>linux 命令杂记</title>
    <link href="http://yoursite.com/2020/04/01/linux-%E5%91%BD%E4%BB%A4%E6%9D%82%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/04/01/linux-%E5%91%BD%E4%BB%A4%E6%9D%82%E8%AE%B0/</id>
    <published>2020-04-01T14:48:57.000Z</published>
    <updated>2020-04-25T02:22:04.664Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><p>根据某个字符串，查询该字符串前后文本信息命令：grep-A|B n”key”file</p><p>其中：<br>    A：表示在字符串之后 after  context<br>    B：表示在字符串之前 before context<br>    n：要获取多少行文本 line number</p><p>实例：grep -A 100 -B 100 -i ‘111’ catalina.out</p><ul><li>-i表示忽略大小写。</li></ul><p>当然，如果我们想获取异常日志的前10行和后10行，不用加-A和-B，使用如下命令就可以了：</p><ul><li>实例：grep -10 -i ‘111’ catalina.out</li></ul><h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><p>mke2fs -t ext4 /dev/name</p><p>mkfs<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkfs           mkfs<span class="selector-class">.cramfs</span>    mkfs<span class="selector-class">.ext3</span>      mkfs<span class="selector-class">.hfs</span>       mkfs<span class="selector-class">.minix</span>     mkfs.reiserfs</span><br><span class="line">mkfs<span class="selector-class">.bfs</span>       mkfs<span class="selector-class">.exfat</span>     mkfs<span class="selector-class">.ext4</span>      mkfs<span class="selector-class">.hfsplus</span>   mkfs<span class="selector-class">.msdos</span>     mkfs<span class="selector-class">.vfat</span>    </span><br><span class="line">mkfs<span class="selector-class">.btrfs</span>     mkfs<span class="selector-class">.ext2</span>      mkfs<span class="selector-class">.fat</span>       mkfs<span class="selector-class">.jfs</span>       mkfs<span class="selector-class">.ntfs</span>      mkfs.xfs</span><br></pre></td></tr></table></figure></p><h3 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h3><p>rsync </p><blockquote><p>  Transfer files either to or from a remote host (not between two remote hosts).<br>  Can transfer single files, or multiple files matching a pattern.</p><ul><li>可用来转移数据,传输文件</li></ul></blockquote><p><code>rsync -av</code>原地址 目的地址</p><ul><li>a包含文件所有信息(This is equivalent to -rlptgoD),如原本权限,修改时间,子目录等等</li><li>v为显示传输过程,P为更为详细的信息输出</li></ul><p>既可以拉取数据,也可以发送数据<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Pull</span>: <span class="selector-tag">rsync</span> <span class="selector-attr">[OPTION...]</span> <span class="selector-attr">[USER@]</span><span class="selector-tag">HOST</span><span class="selector-pseudo">:SRC...</span> <span class="selector-attr">[DEST]</span></span><br><span class="line"><span class="selector-tag">Push</span>: <span class="selector-tag">rsync</span> <span class="selector-attr">[OPTION...]</span> <span class="selector-tag">SRC</span>... <span class="selector-attr">[USER@]</span><span class="selector-tag">HOST</span><span class="selector-pseudo">:DEST</span></span><br></pre></td></tr></table></figure></p><h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><p>查看分区信息<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fdisk</span> <span class="string">-l</span></span><br><span class="line"></span><br><span class="line"><span class="attr">df</span> <span class="string">-h</span></span><br></pre></td></tr></table></figure></p><p>具体分区操作<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/设备名</span><br><span class="line"></span><br><span class="line"><span class="symbol">:p</span>  查看设备分区情况</span><br><span class="line"><span class="symbol">:F</span>  查看设备未分区的块</span><br><span class="line"><span class="symbol">:d</span>  删除一个分区</span><br><span class="line"><span class="symbol">:n</span>  建立一个分区</span><br></pre></td></tr></table></figure></p><ul><li>创建完分区记得创建文件系统</li></ul><h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><p>resize2fs   /dev/mapper/cl00-root  </p><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p><a href="https://www.cnblogs.com/FengGeBlog/p/10239067.html" target="_blank" rel="noopener">https://www.cnblogs.com/FengGeBlog/p/10239067.html</a></p><h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><p>开机自动挂载需修改<code>/etc/fstab</code></p><h3 id="uuid"><a href="#uuid" class="headerlink" title="uuid"></a>uuid</h3><p>blkid /dev/name</p><h1 id="grub"><a href="#grub" class="headerlink" title="grub"></a>grub</h1><p>quit 为简单输出<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">GRUB_CMDLINE_LINUX_DEFAULT</span>=<span class="string">"quiet splash"</span></span><br></pre></td></tr></table></figure></p><ul><li>为默认启动内核参数,一直有效(包括救援模式)</li><li>splash 为显示linux发行版logo</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">GRUB_CMDLINE_LINUX</span>=</span><br></pre></td></tr></table></figure><ul><li>为救援模式的启动参数</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/etc/</span><span class="keyword">default</span>/grub</span><br><span class="line">update-grub</span><br></pre></td></tr></table></figure><p>或在开机出现logo前按ESC再按e可修改启动参数(本次启动有效)</p><h1 id="brightness"><a href="#brightness" class="headerlink" title="brightness"></a>brightness</h1><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">sudo </span><span class="string">systemctl </span><span class="built_in">list-units</span> | <span class="string">grep </span><span class="string">backlight</span></span><br></pre></td></tr></table></figure><ul><li>发现一个启动失败,可能是发生了冲突</li></ul><p>禁用其一<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl mask systemd-backlight<span class="meta">@backlight</span>:acpi_video0.service </span><br><span class="line">Created symlink <span class="regexp">/etc/</span>systemd<span class="regexp">/system/</span>systemd-backlight<span class="meta">@backlight</span>:acpi_video0.service → <span class="regexp">/dev/</span></span><br><span class="line"><span class="literal">null</span>.</span><br></pre></td></tr></table></figure></p><p>重启另外一个<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart systemd-backlight<span class="variable">@backlight</span><span class="symbol">:nvidia_0</span>.service</span><br></pre></td></tr></table></figure></p><ul><li>重启机器发现亮度已经可以正常恢复</li></ul><h1 id="启动时间"><a href="#启动时间" class="headerlink" title="启动时间"></a>启动时间</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemd-<span class="keyword">analyze</span>  </span><br><span class="line"></span><br><span class="line">systemd-<span class="keyword">analyze</span> blame</span><br><span class="line"></span><br><span class="line">systemd-<span class="keyword">analyze</span> <span class="keyword">critical</span>-<span class="keyword">chain</span></span><br></pre></td></tr></table></figure><ul><li>可以根据以上命令输出关闭一些不常用服务以加速开机 `systemctl mask(disable)</li><li>有些服务需要用但就是慢可以尝试手动修改 <code>服务名.service</code>文件,将其加上<code>After = graphical.target</code>,也就是在先等桌面加载玩再加载服务</li></ul><h1 id="zabbix"><a href="#zabbix" class="headerlink" title="zabbix"></a>zabbix</h1><h3 id="NAT转换"><a href="#NAT转换" class="headerlink" title="NAT转换"></a>NAT转换</h3><p>在虚拟机上部署zabbix时,虚拟机使用了NAT网桥,<code>telnet</code>能通,当server一直连不上</p><ul><li>最后在agent配置文件上server的地址加上网关地址<br><a href="https://sysadmin.xyz/main/2018/01/08/zabbix-nat-problem/" target="_blank" rel="noopener">https://sysadmin.xyz/main/2018/01/08/zabbix-nat-problem/</a></li></ul><h3 id="snmp"><a href="#snmp" class="headerlink" title="snmp"></a>snmp</h3><p>安装使用</p><ul><li><a href="http://www.net-snmp.org/wiki/index.php/Tutorials" target="_blank" rel="noopener">http://www.net-snmp.org/wiki/index.php/Tutorials</a></li><li><a href="https://blog.csdn.net/bbwangj/article/details/80981098" target="_blank" rel="noopener">https://blog.csdn.net/bbwangj/article/details/80981098</a></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">telnet 192.168.1.1 161<span class="built_in"> Connection </span>refused</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定用udp扫描端口161</span></span><br><span class="line">nmap -sU 192.168.1.1 -p161</span><br></pre></td></tr></table></figure><h1 id="lol安装"><a href="#lol安装" class="headerlink" title="lol安装"></a>lol安装</h1><p><a href="https://www.reddit.com/r/leagueoflinux/comments/alfbep/league_on_linux_mint_19/" target="_blank" rel="noopener">https://www.reddit.com/r/leagueoflinux/comments/alfbep/league_on_linux_mint_19/</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> snapd</span><br><span class="line"></span><br><span class="line">snap <span class="keyword">install</span> leagueoflegends <span class="comment">--edge --devmode</span></span><br></pre></td></tr></table></figure><ul><li><p>很简单粗暴,没有国服</p></li><li><p>Please consider using the Nouveau driver instead.<br><a href="https://askubuntu.com/questions/267936/how-do-i-get-rid-of-broken-nvidia-randr-detected-falling-back-to-randr-1-0" target="_blank" rel="noopener">https://askubuntu.com/questions/267936/how-do-i-get-rid-of-broken-nvidia-randr-detected-falling-back-to-randr-1-0</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
    
      <category term="linxu" scheme="http://yoursite.com/tags/linxu/"/>
    
  </entry>
  
</feed>
